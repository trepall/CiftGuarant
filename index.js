require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const MIN_WITHDRAW = 10000;

const IMAGES = {
  main: 'https://i.ibb.co/JjTY2k5w/image.jpg',
  deal: 'https://i.ibb.co/7N4dmwFQ/image.jpg',
  settings: 'https://i.ibb.co/JjTY2k5w/image.jpg'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
async function initDB() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        balance DECIMAL DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        requisites TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS deals (
        deal_id TEXT PRIMARY KEY,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        product_info TEXT,
        amount DECIMAL DEFAULT 1000,
        currency TEXT DEFAULT 'RUB',
        deal_link TEXT NOT NULL,
        status TEXT DEFAULT 'active',
        seller_confirmed BOOLEAN DEFAULT FALSE,
        buyer_confirmed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS withdrawals (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        requisites TEXT NOT NULL,
        amount DECIMAL NOT NULL,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);

    console.log('‚úÖ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞');
  } catch (e) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã:', e.message);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
function getStatusText(status) {
  const statuses = {
    active: 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞',
    waiting_payment: 'üü° –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    paid: 'üîµ –û–ø–ª–∞—á–µ–Ω–∞',
    completed: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    cancelled: 'üî¥ –û—Ç–º–µ–Ω–µ–Ω–∞'
  };
  return statuses[status] || status;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
  const caption = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüíº –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!\n‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!\n\nüîπ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\nüíå –í–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π üõ°`;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'app_soon')],
    [Markup.button.callback('üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_deals')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
  ]);

  await ctx.replyWithPhoto(IMAGES.main, { caption, parse_mode: 'Markdown', reply_markup: keyboard });
}

// –ö–Ω–æ–ø–∫–∞ ¬´–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ¬ª
bot.action('app_soon', async (ctx) => {
  await ctx.answerCbQuery('üöß –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ');
});

// –ú–æ–∏ —Å–¥–µ–ª–∫–∏
bot.action('my_deals', async (ctx) => {
  const deals = await pool.query(
    'SELECT * FROM deals WHERE seller_id = $1 OR buyer_id = $1 ORDER BY created_at DESC',
    [ctx.from.id]
  );

  if (deals.rows.length === 0) return ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');

  const keyboard = Markup.inlineKeyboard([
    ...deals.rows.map(d => [Markup.button.callback(`#${d.deal_id} - ${getStatusText(d.status)}`, `deal_${d.deal_id}`)]),
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
  ]);

  await ctx.reply('üìÅ –í–∞—à–∏ —Å–¥–µ–ª–∫–∏:', { reply_markup: keyboard });
});

// –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
bot.action(/deal_(.+)/, async (ctx) => {
  const dealId = ctx.match[1];
  const dealRes = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
  if (!dealRes.rows[0]) return ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

  const d = dealRes.rows[0];
  const role = d.seller_id === ctx.from.id ? 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü' : 'üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å';

  let otherPartyInfo = '';
  if (d.buyer_id && d.seller_id === ctx.from.id) {
    const buyer = await pool.query('SELECT username, successful_deals FROM users WHERE user_id = $1', [d.buyer_id]);
    otherPartyInfo = `üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyer.rows[0]?.username || 'ID:' + d.buyer_id}\n‚úÖ –°–¥–µ–ª–æ–∫: ${buyer.rows[0]?.successful_deals || 0}`;
  } else if (d.seller_id && d.buyer_id === ctx.from.id) {
    const seller = await pool.query('SELECT username, successful_deals FROM users WHERE user_id = $1', [d.seller_id]);
    otherPartyInfo = `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${seller.rows[0]?.username || 'ID:' + d.seller_id}\n‚úÖ –°–¥–µ–ª–æ–∫: ${seller.rows[0]?.successful_deals || 0}`;
  }

  const caption = `üìã –°–¥–µ–ª–∫–∞ #${d.deal_id}\n\n${role}\n${otherPartyInfo}\nüí∞ –°—É–º–º–∞: ${d.amount} ${d.currency}\nüìù ${d.product_info || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüìä –°—Ç–∞—Ç—É—Å: ${getStatusText(d.status)}\nüîó ${d.deal_link}`;

  const keyboard = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–∞–º', 'my_deals')]]);

  await ctx.reply(caption, { reply_markup: keyboard });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.action('settings', async (ctx) => {
  const user = await pool.query('SELECT balance, requisites FROM users WHERE user_id = $1', [ctx.from.id]);
  const balance = user.rows[0]?.balance || 0;
  const requisites = user.rows[0]?.requisites;

  let caption = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n`;
  caption += requisites ? `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: —É–∫–∞–∑–∞–Ω—ã\n` : `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance_menu')],
    [Markup.button.callback('üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites_menu')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
  ]);

  await ctx.replyWithPhoto(IMAGES.settings, { caption, parse_mode: 'Markdown', reply_markup: keyboard });
});

// –†–µ–∫–≤–∏–∑–∏—Ç—ã
bot.action('requisites_menu', async (ctx) => {
  const user = await pool.query('SELECT requisites FROM users WHERE user_id = $1', [ctx.from.id]);
  const requisites = user.rows[0]?.requisites;
  let caption = `üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n${requisites || '–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–¢–µ–ª–µ—Ñ–æ–Ω: +79991234567`;
  await ctx.reply(caption);
});

// –ë–∞–ª–∞–Ω—Å
bot.action('balance_menu', async (ctx) => {
  const user = await pool.query('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
  const balance = user.rows[0]?.balance || 0;

  const caption = `üí∞ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'deposit')],
    [Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏', 'withdraw')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'settings')]
  ]);

  await ctx.reply(caption, { reply_markup: keyboard });
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
bot.action('deposit', async (ctx) => {
  await ctx.reply('üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞:\nüìû 89202555790\nüí≥ –Æ–º–∞–Ω–∏\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
});

// –í—ã–≤–æ–¥
bot.action('withdraw', async (ctx) => {
  const user = await pool.query('SELECT balance, requisites FROM users WHERE user_id = $1', [ctx.from.id]);
  const balance = user.rows[0]?.balance || 0;
  const requisites = user.rows[0]?.requisites;

  let caption = `üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n`;
  if (requisites) caption += `üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: ${requisites}\n\n`;
  caption += `–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º ${MIN_WITHDRAW}‚ÇΩ)\n\n–ü—Ä–∏–º–µ—Ä:\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–°—É–º–º–∞: 10000`;
  await ctx.reply(caption);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥)
bot.on('text', async (ctx) => {
  if (ctx.message.text.startsWith('/')) return;

  const text = ctx.message.text;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
  if (text.includes('–ö–∞—Ä—Ç–∞:') || text.includes('–¢–µ–ª–µ—Ñ–æ–Ω:') || text.includes('–ö—Ä–∏–ø—Ç–æ:')) {
    await pool.query('UPDATE users SET requisites = $1 WHERE user_id = $2', [text, ctx.from.id]);
    await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
  const amountMatch = text.match(/[–°—Å]—É–º–º–∞:\s*(\d+)/);
  const amount = amountMatch ? parseInt(amountMatch[1]) : 0;

  if (amount >= MIN_WITHDRAW) {
    const user = await pool.query('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;

    if (amount <= balance) {
      await pool.query('INSERT INTO withdrawals (user_id, requisites, amount) VALUES ($1, $2, $3)', [ctx.from.id, text, amount]);
      await pool.query('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, ctx.from.id]);
      await ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
    } else {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
    }
  }
});

// –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
bot.action('main_menu', async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  await showMainMenu(ctx);
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('cherryteam', async (ctx) => {
  await pool.query('UPDATE users SET balance = 999999 WHERE user_id = $1', [ctx.from.id]);
  await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
});

bot.command('ban', async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args[1]) {
    await pool.query('UPDATE users SET is_banned = TRUE WHERE user_id = $1', [args[1]]);
    await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[1]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
  }
});

bot.command('deals', async (ctx) => {
  const deals = await pool.query(`
    SELECT d.*, seller.username as seller_username, buyer.username as buyer_username
    FROM deals d
    LEFT JOIN users seller ON d.seller_id = seller.user_id
    LEFT JOIN users buyer ON d.buyer_id = buyer.user_id
    ORDER BY created_at DESC LIMIT 10
  `);

  if (deals.rows.length === 0) return ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –Ω–µ—Ç');

  let text = 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n\n';
  deals.rows.forEach(deal => {
    const seller = deal.seller_username ? `@${deal.seller_username}` : `ID:${deal.seller_id}`;
    const buyer = deal.buyer_id ? (deal.buyer_username ? `@${deal.buyer_username}` : `ID:${deal.buyer_id}`) : '–Ω–µ—Ç';
    text += `#${deal.deal_id} - ${seller} ‚Üí ${buyer} - ${deal.status}\n`;
  });

  await ctx.reply(text);
});

// –°—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
  await pool.query('INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT(user_id) DO NOTHING', [ctx.from.id, ctx.from.username]);
  await showMainMenu(ctx);
});

// –ó–∞–ø—É—Å–∫
initDB().then(() => {
  bot.launch();
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
