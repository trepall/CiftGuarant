const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
app.get('/', (req, res) => {
  res.send('ü§ñ Bot is running!');
});

app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const ADMIN_IDS = [125560041, 6802842517, 8444588939, 913595126];
const MIN_WITHDRAWAL = 10000;
const MAX_WITHDRAWAL = 100000;
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://your-web-app.com';

// ==================== –•–†–ê–ù–ò–õ–ò–©–ê ====================
const userStates = new Map();

// ==================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================
async function db(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result;
  } catch (error) {
    console.error('‚ùå DB error:', error.message);
    return { rows: [] };
  }
}

function formatBalance(amount) {
  return new Intl.NumberFormat('ru-RU').format(amount);
}

function formatCardNumber(cardNumber) {
  return cardNumber.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1 **** **** $4');
}

function isAdmin(userId) {
  return ADMIN_IDS.includes(Number(userId));
}

// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, messageText = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!') {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', WEB_APP_URL)],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
      [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance_menu')]
    ]);
    
    await ctx.replyWithPhoto('https://i.ibb.co/rR4HHhd3/IMG-7369.jpg', {
      caption: `${messageText}\n\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`,
      ...keyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await ctx.reply(`${messageText}\n\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`, {
      ...Markup.inlineKeyboard([
        [Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', WEB_APP_URL)],
        [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')],
        [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance_menu')]
      ]),
      parse_mode: 'HTML'
    });
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
async function showSettingsMenu(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º', 'balance_menu')],
      [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.reply(
      `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n` +
      `üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ\n` +
      `üë§ <b>ID:</b> <code>${ctx.from.id}</code>\n` +
      `üì± <b>–ò–º—è:</b> ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
      { ...keyboard, parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå Settings error:', error);
    await showMainMenu(ctx);
  }
}

// ==================== –ë–ê–õ–ê–ù–° –ò –í–´–í–û–î ====================
async function showBalanceMenu(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'deposit')],
      [Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏', 'withdraw')],
      [Markup.button.callback('üìä –ò—Å—Ç–æ—Ä–∏—è', 'history')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'settings')]
    ]);

    await ctx.reply(
      `üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n` +
      `üí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ\n` +
      `üì§ <b>–ú–∏–Ω. –≤—ã–≤–æ–¥:</b> ${formatBalance(MIN_WITHDRAWAL)}‚ÇΩ\n` +
      `üì• <b>–ú–∞–∫—Å. –≤—ã–≤–æ–¥:</b> ${formatBalance(MAX_WITHDRAWAL)}‚ÇΩ`,
      { ...keyboard, parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå Balance error:', error);
  }
}

bot.action('deposit', async (ctx) => {
  await ctx.reply(
    'üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n' +
    '–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n' +
    '1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É:\n' +
    '   <code>2200 1234 5678 9012</code>\n' +
    '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n' +
    '3. –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç\n\n' +
    'üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username',
    { parse_mode: 'HTML' }
  );
});

bot.action('support', async (ctx) => {
  await ctx.reply(
    'üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n' +
    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n' +
    'üë§ @support_username\n' +
    'üìß email@example.com\n\n' +
    '‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> 24/7',
    { parse_mode: 'HTML' }
  );
});

bot.action('history', async (ctx) => {
  try {
    const transactions = await db(
      'SELECT * FROM transactions WHERE user_id = $1 ORDER BY created_at DESC LIMIT 10',
      [ctx.from.id]
    );
    
    if (transactions.rows.length === 0) {
      await ctx.reply('üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞');
      return;
    }
    
    let historyText = 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n\n';
    transactions.rows.forEach((transaction, index) => {
      const type = transaction.type === 'deposit' ? 'üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : 'üì§ –í—ã–≤–æ–¥';
      const date = new Date(transaction.created_at).toLocaleDateString('ru-RU');
      historyText += `${index + 1}. ${type}\nüíµ ${formatBalance(transaction.amount)}‚ÇΩ\nüìÖ ${date}\n\n`;
    });
    
    await ctx.reply(historyText, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('‚ùå History error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

async function handleWithdraw(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = parseFloat(user.rows[0]?.balance) || 0;
    
    if (balance < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ú–∏–Ω–∏–º—É–º: ${formatBalance(MIN_WITHDRAWAL)}‚ÇΩ`);
      return;
    }
    
    userStates.set(ctx.from.id, { 
      state: 'awaiting_withdrawal',
      timestamp: Date.now(),
      maxAmount: Math.min(balance, MAX_WITHDRAWAL)
    });
    
    await ctx.reply(
      `üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n` +
      `üí≥ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${formatBalance(balance)}‚ÇΩ\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n` +
      `<code>–ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 10000</code>\n\n` +
      `‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå Withdraw error:', error);
  }
}

// ==================== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ====================
bot.command('admin', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
    [Markup.button.callback('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin_users')]
  ]);

  await ctx.reply('üë®‚Äçüíª <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>', { ...keyboard, parse_mode: 'HTML' });
});

bot.command('balance', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }
  
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 2) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance user_id amount');
    return;
  }

  try {
    const userId = args[0];
    const amount = parseFloat(args[1]);
    
    await db('UPDATE users SET balance = balance + $1 WHERE user_id = $2', [amount, userId]);
    await db('INSERT INTO transactions (user_id, type, amount, details) VALUES ($1, $2, $3, $4)',
      [userId, 'deposit', amount, `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`]);
    
    await ctx.reply(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${formatBalance(amount)}‚ÇΩ`);
  } catch (error) {
    console.error('‚ùå Admin balance error:', error);
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const message = ctx.message.text;
    const userState = userStates.get(userId);
    
    if (message === '/cancel') {
      if (userState) {
        userStates.delete(userId);
        await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await showMainMenu(ctx);
      }
      return;
    }
    
    if (userState?.state === 'awaiting_withdrawal') {
      await processWithdrawal(ctx, message, userState);
      return;
    }
  } catch (error) {
    console.error('‚ùå Text processing error:', error);
  }
});

async function processWithdrawal(ctx, message, userState) {
  const userId = ctx.from.id;
  
  try {
    const cardMatch = message.match(/\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b/);
    const amountMatch = message.match(/[–°—Å]—É–º–º–∞:\s*(\d+)/);
    
    if (!cardMatch || !amountMatch) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 10000</code>', { parse_mode: 'HTML' });
      return;
    }
    
    const cardNumber = cardMatch[0].replace(/[\s-]/g, '');
    const amount = parseFloat(amountMatch[1]);
    
    if (amount < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${formatBalance(MIN_WITHDRAWAL)}‚ÇΩ`);
      return;
    }
    
    if (amount > userState.maxAmount) {
      await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${formatBalance(userState.maxAmount)}‚ÇΩ`);
      return;
    }
    
    await db('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, userId]);
    await db('INSERT INTO transactions (user_id, type, amount, details) VALUES ($1, $2, $3, $4)',
      [userId, 'withdrawal', amount, `–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É: ${formatCardNumber(cardNumber)}`]);
    
    await ctx.reply(
      `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
      `üí≥ <b>–ö–∞—Ä—Ç–∞:</b> ${formatCardNumber(cardNumber)}\n` +
      `üí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(amount)}‚ÇΩ\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n` +
      `üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support_username`,
      { parse_mode: 'HTML' }
    );
    
    userStates.delete(userId);
  } catch (error) {
    console.error('‚ùå Withdrawal processing error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞');
    userStates.delete(userId);
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================
bot.action('main_menu', async (ctx) => {
  await ctx.deleteMessage();
  await showMainMenu(ctx);
});

bot.action('settings', async (ctx) => {
  await ctx.deleteMessage();
  await showSettingsMenu(ctx);
});

bot.action('balance_menu', async (ctx) => {
  await ctx.deleteMessage();
  await showBalanceMenu(ctx);
});

bot.action('withdraw', async (ctx) => {
  await ctx.deleteMessage();
  await handleWithdraw(ctx);
});

// ==================== –°–¢–ê–†–¢ ====================
bot.start(async (ctx) => {
  try {
    await db('INSERT INTO users (user_id, username, first_name) VALUES ($1, $2, $3) ON CONFLICT (user_id) DO UPDATE SET username = $2, first_name = $3', 
      [ctx.from.id, ctx.from.username, ctx.from.first_name]);
    
    await showMainMenu(ctx, `üëã –ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name || '–¥—Ä—É–≥'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!`);
  } catch (error) {
    console.error('‚ùå Start error:', error);
    await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  }
});

// ==================== –ó–ê–ü–£–°–ö ====================
async function startBot() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY, 
        username VARCHAR(255),
        first_name VARCHAR(255),
        balance DECIMAL(12,2) DEFAULT 0.00, 
        is_banned BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    await db(`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY, 
        user_id BIGINT NOT NULL,
        type VARCHAR(20) NOT NULL, 
        amount DECIMAL(12,2) NOT NULL,
        details TEXT, 
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    console.log('üöÄ Starting bot on Railway...');
    await bot.launch();
    console.log('‚úÖ Bot started successfully!');
  } catch (error) {
    console.error('‚ùå Startup error:', error);
    setTimeout(startBot, 10000);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`‚ùå Bot error for ${ctx.updateType}:`, err);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();
