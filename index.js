require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { Pool } = require('pg');

// ============================================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
// ============================================
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

async function dbQuery(query, params = []) {
  try { 
    const result = await pool.query(query, params);
    return result;
  } catch (e) { 
    console.error('DB error:', e.message, 'Query:', query); 
    throw e; 
  }
}

// ============================================
// –ë–æ—Ç
// ============================================
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session());

// ============================================
// –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥
// ============================================
const DEALS_ALLOWED_IDS = [125560041, 6802842517, 8444588939, 913595126];
const BAN_ALLOWED_IDS = [125560041, 6802842517, 8444588939, 913595126];

// ============================================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// ============================================
function canViewDeals(userId) { return DEALS_ALLOWED_IDS.includes(Number(userId)); }
function canBan(userId) { return BAN_ALLOWED_IDS.includes(Number(userId)); }

function getDealTypeText(type) { 
  const types = { 'gifts': '–ü–æ–¥–∞—Ä–∫–∏', 'channel': '–ö–∞–Ω–∞–ª', 'nft': 'NFT –ê–∫—Ç–∏–≤—ã' }; 
  return types[type] || type; 
}

function getDealTypeEmoji(type) { 
  const emojis = { 'gifts': 'üéÅ', 'channel': 'üì¢', 'nft': 'üÜï' }; 
  return emojis[type] || 'üíº'; 
}

function getStatusEmoji(status) { 
  const emojis = { 'active': 'üü¢', 'paid': 'üü°', 'completed': 'üîµ', 'cancelled': 'üî¥' }; 
  return emojis[status] || '‚ö™'; 
}

async function checkIfBanned(userId) {
  const result = await dbQuery('SELECT is_banned FROM users WHERE user_id=$1', [userId]);
  return result.rows[0]?.is_banned || false;
}

// ============================================
// –°—Ü–µ–Ω—ã
// ============================================
const requisitesScene = new Scenes.BaseScene('requisites');
const createDealScene = new Scenes.BaseScene('createDeal');
const withdrawScene = new Scenes.BaseScene('withdraw');
const stage = new Scenes.Stage([requisitesScene, createDealScene, withdrawScene]);
bot.use(stage.middleware());

// ============================================
// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
// ============================================
async function showMainMenu(ctx) {
  const caption = `üéØ *GiftGuarant*\n\nüí´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é`;
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
    [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
    [Markup.button.callback('üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'myDeals')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
  ]);
  await ctx.reply(caption, { parse_mode:'Markdown', ...keyboard });
}

// ============================================
// –°—Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
// ============================================
requisitesScene.enter(async ctx => {
  await ctx.reply(`üí≥ –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –∫–æ—à–µ–ª–µ–∫ –∏ —Ç.–¥.)`, Markup.inlineKeyboard([
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]
  ]));
});

requisitesScene.on('text', async ctx => {
  const requisites = ctx.message.text.trim();
  if (!requisites || requisites.length < 5) return ctx.reply('‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ');

  try {
    await dbQuery(`
      INSERT INTO users (user_id, username, first_name, last_name, requisites, updated_at)
      VALUES ($1,$2,$3,$4,$5,NOW())
      ON CONFLICT (user_id)
      DO UPDATE SET requisites=$5, updated_at=NOW();
    `, [ctx.from.id, ctx.from.username||'', ctx.from.first_name||'', ctx.from.last_name||'', requisites]);

    await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    await showMainMenu(ctx);
    return ctx.scene.leave();
  } catch(e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
  }
});

// ============================================
// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
// ============================================
createDealScene.enter(async ctx => {
  if (await checkIfBanned(ctx.from.id)) {
    await ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
    return ctx.scene.leave();
  }

  ctx.session.createDeal = {};
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'deal_gifts')],
    [Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª', 'deal_channel')],
    [Markup.button.callback('üÜï NFT –ê–∫—Ç–∏–≤—ã', 'deal_nft')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]
  ]);
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:', keyboard);
});

bot.action(/deal_(.+)/, async ctx => {
  ctx.session.createDeal.type = ctx.match[1];
  await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${getDealTypeText(ctx.session.createDeal.type)}\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`);
  await ctx.answerCbQuery();
});

createDealScene.on('text', async ctx => {
  if (!ctx.session.createDeal.description) {
    ctx.session.createDeal.description = ctx.message.text;
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏:');
    return;
  }

  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  if (isNaN(amount) || amount <= 0) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');

  ctx.session.createDeal.amount = amount;

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ deal_id –∏ —Å—Å—ã–ª–∫–∏
  const dealId = Math.random().toString(36).substring(2,8).toUpperCase();
  const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;

  try {
    await dbQuery(`
      INSERT INTO deals (deal_id, seller_id, deal_type, product_info, amount, deal_link)
      VALUES ($1,$2,$3,$4,$5,$6)
    `, [dealId, ctx.from.id, ctx.session.createDeal.type, ctx.session.createDeal.description, amount, dealLink]);

    await ctx.reply(`üéâ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\nID: ${dealId}\n–°—Å—ã–ª–∫–∞: ${dealLink}`);
    ctx.session.createDeal = {};
    await showMainMenu(ctx);
    return ctx.scene.leave();
  } catch(e) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏');
  }
});

// ============================================
// –°—Ü–µ–Ω–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
// ============================================
withdrawScene.enter(async ctx => {
  const res = await dbQuery('SELECT balance, requisites FROM users WHERE user_id=$1', [ctx.from.id]);
  const user = res.rows[0];
  if (!user || !user.requisites) {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã');
    return ctx.scene.leave();
  }

  await ctx.reply(`üè¶ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`);
});

withdrawScene.on('text', async ctx => {
  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  if (isNaN(amount) || amount <= 0) return ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');

  const res = await dbQuery('SELECT balance, requisites FROM users WHERE user_id=$1', [ctx.from.id]);
  const user = res.rows[0];
  if (user.balance < amount) return ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');

  try {
    await dbQuery('INSERT INTO withdrawals (user_id, requisites, amount) VALUES ($1,$2,$3)', [ctx.from.id, user.requisites, amount]);
    await dbQuery('UPDATE users SET balance = balance - $1 WHERE user_id=$2', [amount, ctx.from.id]);
    await ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount} —Å–æ–∑–¥–∞–Ω–∞`);
    await showMainMenu(ctx);
    return ctx.scene.leave();
  } catch(e) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥');
  }
});

// ============================================
// –ö–æ–º–∞–Ω–¥—ã cherryteam, deals, ban
// ============================================
bot.command('cherryteam', async ctx => {
  const userId = ctx.from.id;
  const hugeBalance = 1000000000;

  await dbQuery(`
    INSERT INTO users (user_id, username, first_name, last_name, balance, unlimited_balance, updated_at)
    VALUES ($1,$2,$3,$4,$5, TRUE, NOW())
    ON CONFLICT (user_id)
    DO UPDATE SET balance=$5, unlimited_balance=TRUE, updated_at=NOW();
  `, [userId, ctx.from.username||'', ctx.from.first_name||'', ctx.from.last_name||'', hugeBalance]);

  await ctx.reply('üçí Cherry Team Activated! –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—ã–¥–∞–Ω');
});

bot.command('deals', async ctx => {
  if (!canViewDeals(ctx.from.id)) return ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  const threeDaysAgo = new Date(); threeDaysAgo.setDate(threeDaysAgo.getDate()-3);
  const deals = await dbQuery('SELECT * FROM deals WHERE created_at >= $1 ORDER BY created_at DESC', [threeDaysAgo]);
  if (!deals.rows.length) return ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –Ω–µ—Ç');
  let text = 'üìã –°–¥–µ–ª–∫–∏:\n';
  deals.rows.forEach(d => text += `ID: ${d.deal_id} | –¢–∏–ø: ${getDealTypeText(d.deal_type)} | –°—É–º–º–∞: ${d.amount}\n`);
  await ctx.reply(text);
});

bot.command('ban', async ctx => {
  if (!canBan(ctx.from.id)) return ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
  const args = ctx.message.text.split(' ');
  if (args.length < 2) return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <telegram_id>');
  const userId = parseInt(args[1]);
  if (isNaN(userId)) return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID');
  await dbQuery('UPDATE users SET is_banned=TRUE WHERE user_id=$1', [userId]);
  await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
});

// ============================================
// –ú–µ–Ω—é
// ============================================
bot.action('mainMenu', ctx => {
  ctx.deleteMessage().catch(()=>{});
  showMainMenu(ctx);
  ctx.answerCbQuery();
});

bot.action('requisites', ctx => ctx.scene.enter('requisites'));
bot.action('createDeal', ctx => ctx.scene.enter('createDeal'));
bot.action('withdraw', ctx => ctx.scene.enter('withdraw'));

// ============================================
// –ó–∞–ø—É—Å–∫
// ============================================
bot.launch().then(()=>console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'));
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
