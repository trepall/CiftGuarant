require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { Pool } = require('pg');
const { randomBytes } = require('crypto');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ë–æ—Ç
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ê–¥–º–∏–Ω—Å–∫–∏–µ ID
const ADMIN_IDS = [123456789, 987654321]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

// IDs –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à—ë–Ω /deals ‚Äî –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ ENV –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ç
const DEALS_ALLOWED_IDS = process.env.DEALS_ALLOWED_IDS
  ? process.env.DEALS_ALLOWED_IDS.split(',').map(s => Number(s.trim())).filter(Boolean)
  : [...ADMIN_IDS]; // –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–¥–º–∏–Ω—ã

function isAdmin(userId) {
  return ADMIN_IDS.includes(Number(userId));
}

function isDealsAllowed(userId) {
  return DEALS_ALLOWED_IDS.includes(Number(userId)) || isAdmin(userId);
}

// SQL
async function dbQuery(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result;
  } catch (e) {
    console.error('DB error:', e.message, 'Query:', query, 'Params:', params);
    throw e;
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü + –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ unlimited_balance, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
async function initDB() {
  try {
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        requisites TEXT,
        balance DECIMAL(15,2) DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        unlimited_balance BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY,
        deal_id VARCHAR(50) UNIQUE NOT NULL,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        deal_type VARCHAR(50) NOT NULL,
        product_info TEXT NOT NULL,
        currency VARCHAR(20),
        amount DECIMAL(15,2),
        deal_link TEXT NOT NULL,
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS withdrawals (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        requisites TEXT NOT NULL,
        amount DECIMAL(15,2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
    throw error;
  }
}

// –°—Ü–µ–Ω—ã
const requisitesScene = new Scenes.BaseScene('requisites');
const createDealScene = new Scenes.BaseScene('createDeal');
const withdrawScene = new Scenes.BaseScene('withdraw');
const stage = new Scenes.Stage([requisitesScene, createDealScene, withdrawScene]);
bot.use(session());
bot.use(stage.middleware());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
async function checkIfBanned(userId) {
  const result = await dbQuery(
    'SELECT is_banned FROM users WHERE user_id = $1',
    [userId]
  );
  return result.rows[0]?.is_banned || false;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞ (–±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ)
async function getBotUsername(ctx) {
  if (ctx?.botInfo?.username) return ctx.botInfo.username;
  if (process.env.BOT_USERNAME) return process.env.BOT_USERNAME;
  try {
    const me = await bot.telegram.getMe();
    return me.username;
  } catch (e) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞:', e);
    return 'bot';
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
  const caption = `üéØ *GiftGuarant*\nüõ°Ô∏è –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n\n‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n‚úÖ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n‚úÖ –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n\nüí´ –í–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°Ô∏è`;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
    [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
    [Markup.button.callback('üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'myDeals')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
  ]);

  await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
}

// –†–µ–∫–≤–∏–∑–∏—Ç—ã (—É—Å—Ç—Ä–∞–Ω—ë–Ω –±–∞–≥ INSERT ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é EXCLUDED –∏ —É–ª—É—á—à–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è)
requisitesScene.enter(async (ctx) => {
  const caption = `üí≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*\n\nüìù *–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  \n‚Ä¢ –ö—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫\n\n*–ü—Ä–∏–º–µ—Ä:*\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–¢–µ–ª–µ—Ñ–æ–Ω: +79991234567\n–ö—Ä–∏–ø—Ç–æ: UQB123...abc`;

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
  ]);

  await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
});

requisitesScene.on('text', async (ctx) => {
  try {
    const requisites = ctx.message.text?.trim();
    if (!requisites || requisites.length < 10) {
      await ctx.reply('‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }

    // –í—Å—Ç–∞–≤–∫–∞ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UPSERT
    await dbQuery(
      `INSERT INTO users (user_id, username, first_name, last_name, requisites, updated_at) 
       VALUES ($1, $2, $3, $4, $5, NOW())
       ON CONFLICT (user_id) DO UPDATE SET requisites = EXCLUDED.requisites, updated_at = NOW()`,
      [
        ctx.from.id,
        ctx.from.username || '',
        ctx.from.first_name || '',
        ctx.from.last_name || '',
        requisites
      ]
    );

    await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    await showMainMenu(ctx);
    return ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∞–ª –ª–æ–≥–∏–∫—É —Å—Ü–µ–Ω—ã –≤ state (—É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –±–∞–≥–∏ —Å –ø–æ—Ç–µ—Ä–µ–π session)
createDealScene.enter(async (ctx) => {
  try {
    const isBanned = await checkIfBanned(ctx.from.id);
    if (isBanned) {
      await ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏');
      return ctx.scene.leave();
    }

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º state –¥–ª—è —Å—Ü–µ–Ω—ã
    ctx.scene.state = { step: 'chooseType' };

    const caption = `üõçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'deal_gifts')],
      [Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª', 'deal_channel')],
      [Markup.button.callback('üÜï NFT –ê–∫—Ç–∏–≤—ã', 'deal_nft')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
    ]);

    await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ enter createDealScene:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return ctx.scene.leave();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã)
bot.action(/deal_(.+)/, async (ctx) => {
  try {
    const type = ctx.match[1];
    // –ï—Å–ª–∏ —Å—Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ state –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º —à–∞–≥
    if (ctx.scene && ctx.scene.state) {
      ctx.scene.state.dealType = type;
      ctx.scene.state.step = 'waitingProduct';
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: *${getDealTypeText(type)}*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`, { parse_mode: 'Markdown' });
    } else {
      // –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ü–µ–Ω—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ
      await ctx.scene.enter('createDeal');
      if (!ctx.scene.state) ctx.scene.state = {};
      ctx.scene.state.dealType = type;
      ctx.scene.state.step = 'waitingProduct';
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: *${getDealTypeText(type)}*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`, { parse_mode: 'Markdown' });
    }
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
bot.action(/currency_(.+)/, async (ctx) => {
  try {
    if (!ctx.scene || !ctx.scene.state) {
      await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏.');
      return;
    }
    ctx.scene.state.currency = ctx.match[1];
    ctx.scene.state.step = 'waitingAmount';

    const caption = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ ${ctx.scene.state.currency}:`;
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]
    ]);

    await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
createDealScene.on('text', async (ctx) => {
  try {
    const state = ctx.scene.state || {};
    const text = ctx.message.text?.trim();

    if (state.step === 'waitingProduct') {
      if (!text || text.length < 3) {
        await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.');
        return;
      }
      state.productInfo = text;
      state.step = 'waitingCurrency';

      const caption = `üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`;
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üíé TON', 'currency_TON'), Markup.button.callback('üíµ USDT', 'currency_USDT')],
        [Markup.button.callback('‚≠êÔ∏è STARS', 'currency_STARS'), Markup.button.callback('üá∑üá∫ RUB', 'currency_RUB')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]
      ]);

      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
      return;
    }

    if (state.step === 'waitingAmount') {
      const amount = parseFloat((text || '').replace(',', '.'));
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ 0)');
        return;
      }
      state.amount = amount;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π deal_id –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—Å—Ç–∞–≤–ª—è–µ–º (–≤ —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º)
      let dealId;
      let inserted = false;
      let attempts = 0;
      const botUsername = await getBotUsername(ctx);

      while (!inserted && attempts < 5) {
        attempts++;
        dealId = randomBytes(4).toString('hex').toUpperCase(); // 8 hex chars
        const dealLink = `https://t.me/${botUsername}?start=deal_${dealId}`;

        try {
          await dbQuery(
            `INSERT INTO deals (deal_id, seller_id, deal_type, product_info, currency, amount, deal_link) 
             VALUES ($1, $2, $3, $4, $5, $6, $7)`,
            [dealId, ctx.from.id, state.dealType, state.productInfo, state.currency, state.amount, dealLink]
          );
          inserted = true;
        } catch (err) {
          // –µ—Å–ª–∏ unique violation ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π id
          if (err?.code === '23505') {
            console.warn('Conflict deal_id, regenerating...', dealId);
            continue;
          } else {
            throw err;
          }
        }
      }

      if (!inserted) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫)');
      }

      const caption = `üéâ *–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìã ID: ${dealId}\nüéØ –¢–∏–ø: ${getDealTypeText(state.dealType)}\nüí∞ –°—É–º–º–∞: ${state.amount} ${state.currency}\nüîó –°—Å—ã–ª–∫–∞: https://t.me/${botUsername}?start=deal_${dealId}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]
      ]);

      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });

      // –û—á–∏—â–∞–µ–º state –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
      ctx.scene.state = {};
      return ctx.scene.leave();
    }

    // –ï—Å–ª–∏ —à–∞–≥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
    await ctx.reply('‚ùå –Ø –Ω–µ –æ–∂–∏–¥–∞–ª —ç—Ç–æ—Ç –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É.');
    return ctx.scene.leave();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return ctx.scene.leave();
  }
});

// –ú–æ–∏ —Å–¥–µ–ª–∫–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –±—ã–ª–æ, –Ω–æ —Å –º–∞–ª–æ–π –ø—Ä–∞–≤–∫–æ–π –¥–ª—è guard)
bot.action('myDeals', async (ctx) => {
  try {
    const result = await dbQuery(
      'SELECT * FROM deals WHERE seller_id = $1 ORDER BY created_at DESC LIMIT 10',
      [ctx.from.id]
    );

    if (!result.rows.length) {
      const caption = `üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫*\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É!`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
      ]);

      // –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await ctx.editMessageText(caption, { parse_mode: 'Markdown', ...keyboard });
      } catch (e) {
        await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
      }
      return;
    }

    const deal = result.rows[0];
    const caption = `üìã *–°–¥–µ–ª–∫–∞ #${deal.deal_id}*\nüéØ –¢–∏–ø: ${getDealTypeEmoji(deal.deal_type)} ${getDealTypeText(deal.deal_type)}\nüí∞ –°—É–º–º–∞: ${deal.amount || 0} ${deal.currency || ''}\nüìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(deal.status)} ${deal.status}\nüïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleDateString('ru-RU')}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', deal.deal_link)],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
    ]);

    try {
      await ctx.editMessageText(caption, { parse_mode: 'Markdown', ...keyboard });
    } catch (e) {
      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
    }

    await ctx.answerCbQuery();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', e);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.action('settings', async (ctx) => {
  try {
    const userRes = await dbQuery(
      'SELECT balance, successful_deals, requisites FROM users WHERE user_id = $1',
      [ctx.from.id]
    );
    const user = userRes.rows[0] || { balance: 0, successful_deals: 0, requisites: '–Ω–µ —É–∫–∞–∑–∞–Ω—ã' };

    const caption = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${user.successful_deals}\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: ${user.requisites && user.requisites !== '–Ω–µ —É–∫–∞–∑–∞–Ω—ã' ? '—É–∫–∞–∑–∞–Ω—ã' : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')],
      [Markup.button.callback('üè¶ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
      [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
    ]);

    try {
      await ctx.editMessageText(caption, { parse_mode: 'Markdown', ...keyboard });
    } catch (e) {
      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–æ–≥–∏–∫–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ —è–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)
withdrawScene.enter(async (ctx) => {
  const userRes = await dbQuery('SELECT balance, requisites FROM users WHERE user_id=$1', [ctx.from.id]);
  const user = userRes.rows[0] || { balance: 0, requisites: null };

  if (!user.requisites) {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö');
    return ctx.scene.leave();
  }

  const caption = `üè¶ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${user.requisites}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`;
  const buttons = Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'mainMenu')]]);
  await ctx.reply(caption, { parse_mode: 'Markdown', ...buttons });
});

withdrawScene.on('text', async (ctx) => {
  const amount = parseFloat(ctx.message.text.replace(',', '.'));
  if (isNaN(amount) || amount <= 0) {
    await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }

  const userRes = await dbQuery('SELECT balance, requisites FROM users WHERE user_id=$1', [ctx.from.id]);
  const user = userRes.rows[0];

  if (!user || parseFloat(user.balance) < amount) {
    await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
    return ctx.scene.leave();
  }

  try {
    await dbQuery('INSERT INTO withdrawals (user_id, requisites, amount) VALUES ($1,$2,$3)', [ctx.from.id, user.requisites, amount]);
    await dbQuery('UPDATE users SET balance = balance - $1 WHERE user_id=$2', [amount, ctx.from.id]);

    await ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    await showMainMenu(ctx);
    return ctx.scene.leave();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.action('mainMenu', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  }
  await showMainMenu(ctx);
  await ctx.answerCbQuery();
});

bot.action('requisites', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  }
  await ctx.scene.enter('requisites');
  await ctx.answerCbQuery();
});

bot.action('createDeal', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  }
  await ctx.scene.enter('createDeal');
  await ctx.answerCbQuery();
});

bot.action('deposit', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üí∞ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin');
});

bot.action('withdraw', async (ctx) => {
  await ctx.scene.enter('withdraw');
  await ctx.answerCbQuery();
});

// ========== –ù–û–í–´–ï / –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

// /cherryteam ‚Äî —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
// –î–∞—ë—Ç "–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π" –±–∞–ª–∞–Ω—Å ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ñ–ª–∞–≥ unlimited_balance = true –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å –≤ –ë–î.
bot.command('cherryteam', async (ctx) => {
  try {
    const hugeBalance = 1000000000; // 1 –º–ª—Ä–¥ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
    await dbQuery(
      `INSERT INTO users (user_id, username, first_name, last_name, balance, unlimited_balance, updated_at) 
       VALUES ($1,$2,$3,$4,$5, TRUE, NOW())
       ON CONFLICT (user_id) DO UPDATE SET unlimited_balance = TRUE, balance = $5, updated_at = NOW()`,
      [ctx.from.id, ctx.from.username || '', ctx.from.first_name || '', ctx.from.last_name || '', hugeBalance]
    );

    // –û—Ç–º–µ—á–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏ —Ç–æ–∂–µ (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞)
    if (!ctx.session) ctx.session = {};
    ctx.session.unlimitedBalance = true;

    await ctx.reply(
      `üçí *Cherry Team Activated*\n\n‚úÖ –í–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å (unlimited)\nüí≥ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ${hugeBalance}‚ÇΩ\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ª—é–±—ã–µ —Å–¥–µ–ª–∫–∏ –≤ –±–æ—Ç–µ.`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã cherryteam:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ cherryteam');
  }
});

// /deals ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ (DEALS_ALLOWED_IDS –∏–ª–∏ –∞–¥–º–∏–Ω–∞–º).
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è. –ö–Ω–æ–ø–∫–∏ ‚Äî –ø–æ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ; –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
bot.command('deals', async (ctx) => {
  try {
    if (!isDealsAllowed(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);

    const dealsResult = await dbQuery(`
      SELECT 
        d.*,
        seller.username as seller_username,
        seller.user_id as seller_userid,
        buyer.username as buyer_username, 
        buyer.user_id as buyer_userid
      FROM deals d
      LEFT JOIN users seller ON d.seller_id = seller.user_id
      LEFT JOIN users buyer ON d.buyer_id = buyer.user_id
      WHERE d.created_at >= $1
      ORDER BY d.created_at DESC
      LIMIT 50
    `, [threeDaysAgo]);

    const deals = dealsResult.rows;

    if (!deals.length) {
      return ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–µ—Ç');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ ‚Äî –ø–æ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ
    const buttons = deals.map(d => {
      const label = `${d.deal_id} ‚Äî ${getDealTypeEmoji(d.deal_type)} ${getDealTypeText(d.deal_type)} ‚Äî ${d.amount || '0'} ${d.currency || ''}`;
      return [Markup.button.callback(label, `view_deal_${d.deal_id}`)];
    });

    // –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç—å
    buttons.push([Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close_deals')]);

    await ctx.reply(`üì¶ *–°–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è:*`, { parse_mode: 'Markdown', ...Markup.inlineKeyboard(buttons) });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã deals:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–¥–µ–ª–∫—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
bot.action(/view_deal_(.+)/, async (ctx) => {
  try {
    const dealId = ctx.match[1];
    const dealRes = await dbQuery(`
      SELECT 
        d.*,
        seller.username as seller_username,
        seller.user_id as seller_userid,
        buyer.username as buyer_username, 
        buyer.user_id as buyer_userid
      FROM deals d
      LEFT JOIN users seller ON d.seller_id = seller.user_id
      LEFT JOIN users buyer ON d.buyer_id = buyer.user_id
      WHERE d.deal_id = $1
      LIMIT 1
    `, [dealId]);

    const deal = dealRes.rows[0];
    if (!deal) {
      await ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
      return;
    }

    const sellerInfo = deal.seller_username ? `@${deal.seller_username}` : `ID: ${deal.seller_userid}`;
    const buyerInfo = deal.buyer_username ? `@${deal.buyer_username}` : (deal.buyer_userid ? `ID: ${deal.buyer_userid}` : '‚ùå –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const caption = `üìã *–°–¥–µ–ª–∫–∞ #${deal.deal_id}*\n\n` +
      `üéØ –¢–∏–ø: ${getDealTypeText(deal.deal_type)}\n` +
      `üí∞ –°—É–º–º–∞: ${deal.amount || 0} ${deal.currency || ''}\n` +
      `üìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(deal.status)} ${deal.status}\n\n` +
      `üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* ${sellerInfo}\n` +
      `üë• *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${buyerInfo}\n\n` +
      `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${deal.product_info}\n` +
      `üïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleString('ru-RU')}\n\n` +
      `üîó –°—Å—ã–ª–∫–∞: ${deal.deal_link || '‚Äî'}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É —Å–¥–µ–ª–∫–∏', deal.deal_link || `https://t.me/${await getBotUsername(ctx)}?start=deal_${deal.deal_id}`)],
      [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'deals_list_back'), Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close_deals')]
    ]);

    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ), –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try {
      await ctx.editMessageText(caption, { parse_mode: 'Markdown', ...keyboard });
    } catch (e) {
      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
    }

    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ view_deal:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–∫–∏');
  }
});

bot.action('deals_list_back', async (ctx) => {
  try {
    // –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏–º –∫–æ–º–∞–Ω–¥—É deals (–≤—Ä—É—á–Ω—É—é –≤—ã–∑–≤–∞—Ç—å –Ω–µ .command –∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ—Ç –∂–µ –∫–æ–¥)
    await ctx.deleteMessage().catch(() => {});
    // emulate /deals
    await bot.telegram.sendMessage(ctx.chat.id, 'üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫...');
    // –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ /deals –µ—â—ë —Ä–∞–∑
    await bot.telegram.sendMessage(ctx.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ /deals –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞');
    await ctx.answerCbQuery();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ deals_list_back:', e);
    await ctx.answerCbQuery();
  }
});

bot.action('refresh_deals', async (ctx) => {
  await ctx.deleteMessage().catch(()=>{});
  await ctx.telegram.sendMessage(ctx.chat.id, 'üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫...');
  await ctx.answerCbQuery();
});

bot.action('close_deals', async (ctx) => {
  await ctx.deleteMessage().catch(()=>{});
  await ctx.answerCbQuery();
});

// /ban ‚Äî –±–∞–Ω –ø–æ telegram id (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
bot.command('ban', async (ctx) => {
  try {
    if (!isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
      return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>\n–ü—Ä–∏–º–µ—Ä: /ban 123456789');
    }

    const userId = parseInt(args[1]);
    if (isNaN(userId)) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ ‚Äî –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
    await dbQuery(`
      INSERT INTO users (user_id, updated_at, is_banned)
      VALUES ($1, NOW(), TRUE)
      ON CONFLICT (user_id) DO UPDATE SET is_banned = TRUE, updated_at = NOW()
    `, [userId]);

    const userResult = await dbQuery(
      'SELECT username, first_name FROM users WHERE user_id = $1',
      [userId]
    );

    const user = userResult.rows[0];
    const userInfo = user ?
      `${user.first_name || ''} @${user.username || '–Ω–µ—Ç'}` :
      '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ';

    await ctx.reply(
      `üö´ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*\n\n` +
      `üë§ ID: ${userId}\n` +
      `üìõ ${userInfo}\n\n` +
      `‚ùå –¢–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç:\n` +
      `‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏\n` +
      `‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏\n` +
      `‚Ä¢ –í—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞`,
      { parse_mode: 'Markdown' }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ban:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

// /start –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id, ctx.from.username);

    await dbQuery(
      `INSERT INTO users (user_id, username, first_name, last_name, created_at, updated_at) 
       VALUES ($1, $2, $3, $4, NOW(), NOW()) 
       ON CONFLICT (user_id) DO NOTHING`,
      [
        ctx.from.id,
        ctx.from.username || '',
        ctx.from.first_name || '',
        ctx.from.last_name || ''
      ]
    );

    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', ctx.from.id);
    await showMainMenu(ctx);

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ /start:', error);
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
      [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
      [Markup.button.callback('üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'myDeals')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
    ]);

    await ctx.reply(
      'üéØ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!* üõ°Ô∏è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
      {
        parse_mode: 'Markdown',
        ...keyboard
      }
    );
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getDealTypeText(type) {
  const types = { 'gifts': '–ü–æ–¥–∞—Ä–∫–∏', 'channel': '–ö–∞–Ω–∞–ª', 'nft': 'NFT –ê–∫—Ç–∏–≤—ã' };
  return types[type] || type;
}

function getDealTypeEmoji(type) {
  const emojis = { 'gifts': 'üéÅ', 'channel': 'üì¢', 'nft': 'üÜï' };
  return emojis[type] || 'üíº';
}

function getStatusEmoji(status) {
  const emojis = { 'active': 'üü¢', 'paid': 'üü°', 'completed': 'üîµ', 'cancelled': 'üî¥' };
  return emojis[status] || '‚ö™';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
});

// –ó–∞–ø—É—Å–∫
initDB().then(() => {
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
  });
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
