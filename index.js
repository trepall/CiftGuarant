require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { Pool } = require('pg');

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ë–ï–ó SSL –æ—à–∏–±–æ–∫
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // –û–¢–ö–õ–Æ–ß–ê–ï–ú SSL –ü–†–û–í–ï–†–ö–£
  }
});

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
const ADMIN_IDS = [123456789]; // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID

function isAdmin(userId) {
    return ADMIN_IDS.includes(userId);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –ë–ï–ó SSL –æ—à–∏–±–æ–∫
async function dbQuery(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result;
  } catch (error) {
    console.error('Database error:', error.message);
    throw error;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
async function initDB() {
  try {
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        requisites TEXT,
        balance DECIMAL(15,2) DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY,
        deal_id VARCHAR(50) UNIQUE NOT NULL,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        deal_type VARCHAR(50) NOT NULL,
        product_info TEXT NOT NULL,
        currency VARCHAR(20) NOT NULL,
        amount DECIMAL(15,2) NOT NULL,
        deal_link TEXT NOT NULL,
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS withdrawals (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        requisites TEXT NOT NULL,
        amount DECIMAL(15,2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
  }
}

// –°—Ü–µ–Ω—ã
const requisitesScene = new Scenes.BaseScene('requisites');
const createDealScene = new Scenes.BaseScene('createDeal');
const withdrawScene = new Scenes.BaseScene('withdraw');

// –°—Ü–µ–Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
requisitesScene.enter(async (ctx) => {
  await ctx.reply(
    `üí≥ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤**\n\n` +
    `üìù –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n` +
    `‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n` +
    `‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n` +
    `‚Ä¢ –ö—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫\n\n` +
    `üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∂–µ:`
  );
});

requisitesScene.on('text', async (ctx) => {
  if (ctx.message.text === '‚è™ –ù–∞–∑–∞–¥') {
    await showMainMenu(ctx);
    return ctx.scene.leave();
  }

  try {
    await dbQuery(
      `INSERT INTO users (user_id, requisites, updated_at) 
       VALUES ($1, $2, NOW()) 
       ON CONFLICT (user_id) 
       DO UPDATE SET requisites = $2, updated_at = NOW()`,
      [ctx.from.id, ctx.message.text]
    );

    await ctx.reply(
      `‚úÖ **–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n` +
      `üí´ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏`,
      Markup.keyboard([['‚è™ –ù–∞–∑–∞–¥']]).resize()
    );
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
  }
});

// –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
createDealScene.enter(async (ctx) => {
  await ctx.reply(
    `üõçÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏**\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:`,
    Markup.keyboard([
      ['üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'üì¢ –ö–∞–Ω–∞–ª'],
      ['üÜï NFT –ê–∫—Ç–∏–≤—ã', '‚è™ –ù–∞–∑–∞–¥']
    ]).resize()
  );
});

createDealScene.hears('üéÅ –ü–æ–¥–∞—Ä–∫–∏', async (ctx) => {
  ctx.session.dealType = 'gifts';
  await ctx.reply(
    `üéÅ **–°–¥–µ–ª–∫–∞: –ü–æ–¥–∞—Ä–∫–∏**\n\n` +
    `üîó –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:\n` +
    `‚Ä¢ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å\n` +
    `‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω\n` +
    `‚Ä¢ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞\n\n` +
    `üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:`,
    Markup.keyboard([['‚è™ –ù–∞–∑–∞–¥']]).resize()
  );
});

createDealScene.hears('üì¢ –ö–∞–Ω–∞–ª', async (ctx) => {
  ctx.session.dealType = 'channel';
  await ctx.reply(
    `üì¢ **–°–¥–µ–ª–∫–∞: –ö–∞–Ω–∞–ª**\n\n` +
    `ü§ñ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª\n\n` +
    `üîó –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:`,
    Markup.keyboard([['‚è™ –ù–∞–∑–∞–¥']]).resize()
  );
});

createDealScene.hears('üÜï NFT –ê–∫—Ç–∏–≤—ã', async (ctx) => {
  ctx.session.dealType = 'nft';
  await ctx.reply(
    `üÜï **–°–¥–µ–ª–∫–∞: NFT –ê–∫—Ç–∏–≤—ã**\n\n` +
    `üíé –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç–µ:\n` +
    `‚Ä¢ –ó–≤—ë–∑–¥—ã ‚≠êÔ∏è\n` +
    `‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ üí¥\n` +
    `‚Ä¢ NFT —é–∑–µ—Ä\n\n` +
    `üëá –û–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤:`,
    Markup.keyboard([['‚è™ –ù–∞–∑–∞–¥']]).resize()
  );
});

createDealScene.on('text', async (ctx) => {
  if (ctx.message.text === '‚è™ –ù–∞–∑–∞–¥') {
    await showMainMenu(ctx);
    return ctx.scene.leave();
  }

  if (!ctx.session.dealType) return;

  if (ctx.session.dealType && !ctx.session.productInfo) {
    ctx.session.productInfo = ctx.message.text;
    
    await ctx.reply(
      `üíµ **–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã**\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:`,
      Markup.keyboard([
        ['üíé TON', 'üíµ USDT'],
        ['‚≠êÔ∏è STARS', 'üá∑üá∫ RUB'],
        ['‚è™ –ù–∞–∑–∞–¥']
      ]).resize()
    );
    return;
  }

  if (ctx.session.currency && !ctx.session.amount) {
    const amount = parseFloat(ctx.message.text);
    if (isNaN(amount)) {
      await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500.50)');
      return;
    }

    try {
      const dealId = generateDealId();
      const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;
      
      await dbQuery(
        `INSERT INTO deals (deal_id, seller_id, deal_type, product_info, currency, amount, deal_link) 
         VALUES ($1, $2, $3, $4, $5, $6, $7)`,
        [dealId, ctx.from.id, ctx.session.dealType, ctx.session.productInfo, 
         ctx.session.currency, amount, dealLink]
      );

      await ctx.reply(
        `üéâ **–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n` +
        `üì¶ –¢–∏–ø: ${getDealTypeEmoji(ctx.session.dealType)} ${getDealTypeText(ctx.session.dealType)}\n` +
        `üíµ –°—É–º–º–∞: ${amount} ${ctx.session.currency}\n` +
        `üÜî ID: #${dealId}\n\n` +
        `üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:**\n${dealLink}\n\n` +
        `üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—é`,
        Markup.keyboard([
          ['üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'],
          ['üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
        ]).resize()
      );

      // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
      delete ctx.session.dealType;
      delete ctx.session.productInfo;
      delete ctx.session.currency;
      delete ctx.session.amount;
      
      return ctx.scene.leave();
    } catch (error) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏');
      return ctx.scene.leave();
    }
  }
});

createDealScene.hears(['üíé TON', 'üíµ USDT', '‚≠êÔ∏è STARS', 'üá∑üá∫ RUB'], async (ctx) => {
  ctx.session.currency = ctx.message.text;
  await ctx.reply(
    `üí∞ **–í–≤–æ–¥ —Å—É–º–º—ã**\n\n` +
    `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ ${ctx.session.currency}:\n\n` +
    `üí° –ü—Ä–∏–º–µ—Ä: 1500.50`,
    Markup.keyboard([['‚è™ –ù–∞–∑–∞–¥']]).resize()
  );
});

// –°—Ü–µ–Ω–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
withdrawScene.enter(async (ctx) => {
  await ctx.reply(
    `üè¶ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**\n\n` +
    `üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 7,000‚ÇΩ\n\n` +
    `üëá –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:`
  );
});

withdrawScene.on('text', async (ctx) => {
  const amount = parseFloat(ctx.message.text);
  
  if (isNaN(amount)) {
    await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
    return;
  }

  try {
    const userResult = await dbQuery(
      'SELECT balance FROM users WHERE user_id = $1',
      [ctx.from.id]
    );

    if (userResult.rows.length === 0) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (userResult.rows[0].balance < 7000) {
      await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 7,000‚ÇΩ');
      await showMainMenu(ctx);
      return ctx.scene.leave();
    }

    if (amount > userResult.rows[0].balance) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      return;
    }

    await ctx.reply(
      `‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞!**\n\n` +
      `üíµ –°—É–º–º–∞: ${amount}‚ÇΩ\n` +
      `‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞: –¥–æ 24 —á–∞—Å–æ–≤\n\n` +
      `üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @GiftGuarantSupport`,
      Markup.keyboard([
        ['üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'],
        ['üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
      ]).resize()
    );

    return ctx.scene.leave();
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤');
    return ctx.scene.leave();
  }
});

const stage = new Scenes.Stage([requisitesScene, createDealScene, withdrawScene]);
bot.use(session());
bot.use(stage.middleware());

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
async function showMainMenu(ctx) {
  await ctx.reply(
    `üéØ **GiftGuarant**\n\n` +
    `üõ°Ô∏è *–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫*\n\n` +
    `‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n` +
    `‚úÖ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n` +
    `‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n` +
    `‚úÖ –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n` +
    `‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n\n` +
    `üí´ *–í–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π!* üõ°Ô∏è`,
    Markup.keyboard([
      ['üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'],
      ['üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]).resize()
  );
}

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.start(async (ctx) => {
  const startPayload = ctx.startPayload;
  
  if (startPayload && startPayload.startsWith('deal_')) {
    await handleBuyerFlow(ctx, startPayload);
    return;
  }

  try {
    await dbQuery(
      `INSERT INTO users (user_id, username, first_name, last_name) 
       VALUES ($1, $2, $3, $4) 
       ON CONFLICT (user_id) DO NOTHING`,
      [ctx.from.id, ctx.from.username, ctx.from.first_name, ctx.from.last_name]
    );
  } catch (error) {
    console.error('Error registering user:', error.message);
  }

  await showMainMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears('üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', (ctx) => ctx.scene.enter('requisites'));
bot.hears('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', (ctx) => ctx.scene.enter('createDeal'));
bot.hears('üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', async (ctx) => await showUserDeals(ctx));
bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => await showSettings(ctx));
bot.hears('‚è™ –ù–∞–∑–∞–¥', async (ctx) => await showMainMenu(ctx));

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserDeals(ctx) {
  try {
    const result = await dbQuery(
      'SELECT * FROM deals WHERE seller_id = $1 ORDER BY created_at DESC LIMIT 10',
      [ctx.from.id]
    );

    if (result.rows.length === 0) {
      await ctx.reply(
        `üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫**\n\n` +
        `üéØ –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!`
      );
      return;
    }

    for (const deal of result.rows) {
      await ctx.reply(
        `üìã **–°–¥–µ–ª–∫–∞ #${deal.deal_id}**\n\n` +
        `üéØ –¢–∏–ø: ${getDealTypeEmoji(deal.deal_type)} ${getDealTypeText(deal.deal_type)}\n` +
        `üí∞ –°—É–º–º–∞: ${deal.amount} ${deal.currency}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(deal.status)} ${deal.status}\n` +
        `üïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleDateString('ru-RU')}\n\n` +
        `üîó *–°—Å—ã–ª–∫–∞:* ${deal.deal_link}`,
        Markup.inlineKeyboard([
          [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', deal.deal_link)]
        ])
      );
    }
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫');
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
async function showSettings(ctx) {
  try {
    const result = await dbQuery(
      'SELECT balance, successful_deals, requisites FROM users WHERE user_id = $1',
      [ctx.from.id]
    );

    const user = result.rows[0] || { balance: 0, successful_deals: 0, requisites: '–Ω–µ —É–∫–∞–∑–∞–Ω—ã' };

    await ctx.reply(
      `‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
      `üí≥ *–ë–∞–ª–∞–Ω—Å:* ${user.balance}‚ÇΩ\n` +
      `üìä *–£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:* ${user.successful_deals}\n` +
      `üí≥ *–†–µ–∫–≤–∏–∑–∏—Ç—ã:* ${user.requisites ? '—É–∫–∞–∑–∞–Ω—ã' : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n` +
      `üéõÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*`,
      Markup.inlineKeyboard([
        [Markup.button.callback('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')],
        [Markup.button.callback('üè¶ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
        [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'change_requisites')]
      ])
    );
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// Inline –∫–Ω–æ–ø–∫–∏
bot.action('deposit', async (ctx) => {
  await ctx.editMessageText(
    `üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**\n\n` +
    `üì• –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:\n\n` +
    `üí∏ *–†–µ–∫–≤–∏–∑–∏—Ç—ã:*\n` +
    `‚Ä¢ –Æ–º–∞–Ω–∏: 89202555790\n` +
    `‚Ä¢ –°–ë–ü: 89202555790\n\n` +
    `üí° *–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:*\n` +
    `–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10-15 –º–∏–Ω—É—Ç\n\n` +
    `üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @GiftGuarantSupport`
  );
});

bot.action('withdraw', async (ctx) => {
  await ctx.scene.enter('withdraw');
});

bot.action('change_requisites', async (ctx) => {
  await ctx.scene.enter('requisites');
});

// –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´

// /cherryteam - –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
bot.command('cherryteam', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    try {
        await dbQuery(
            'UPDATE users SET balance = 999999 WHERE user_id = $1',
            [ctx.from.id]
        );
        
        await ctx.reply(
            `üéâ **–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
            `üí∞ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 999,999‚ÇΩ\n` +
            `üí´ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!`
        );
    } catch (error) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –±–∞–ª–∞–Ω—Å–∞');
    }
});

// /bun - –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
bot.command('bun', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
        return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bun <user_id>');
    }

    const userId = parseInt(args[1]);
    if (isNaN(userId)) {
        return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    try {
        await dbQuery(
            'UPDATE users SET is_banned = TRUE WHERE user_id = $1',
            [userId]
        );
        
        await ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–∞–Ω–µ–Ω!`);
    } catch (error) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
});

// /deals - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
bot.command('deals', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    try {
        const result = await dbQuery(`
            SELECT d.*, u1.username as seller_username, u2.username as buyer_username
            FROM deals d
            LEFT JOIN users u1 ON d.seller_id = u1.user_id
            LEFT JOIN users u2 ON d.buyer_id = u2.user_id
            ORDER BY d.created_at DESC
            LIMIT 20
        `);

        if (result.rows.length === 0) {
            return ctx.reply('üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫');
        }

        for (const deal of result.rows) {
            const sellerInfo = deal.seller_username ? `@${deal.seller_username}` : `ID: ${deal.seller_id}`;
            const buyerInfo = deal.buyer_username ? `@${deal.buyer_username}` : (deal.buyer_id ? `ID: ${deal.buyer_id}` : '‚ùå –ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è');
            
            await ctx.reply(
                `üìä **–°–¥–µ–ª–∫–∞ #${deal.deal_id}**\n\n` +
                `üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* ${sellerInfo}\n` +
                `üë• *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${buyerInfo}\n` +
                `üéØ *–¢–∏–ø:* ${getDealTypeEmoji(deal.deal_type)} ${getDealTypeText(deal.deal_type)}\n` +
                `üì¶ *–¢–æ–≤–∞—Ä:* ${deal.product_info}\n` +
                `üí∞ *–°—É–º–º–∞:* ${deal.amount} ${deal.currency}\n` +
                `üìà *–°—Ç–∞—Ç—É—Å:* ${getStatusEmoji(deal.status)} ${deal.status}\n` +
                `üïê *–°–æ–∑–¥–∞–Ω–∞:* ${new Date(deal.created_at).toLocaleString('ru-RU')}\n\n` +
                `üîó *–°—Å—ã–ª–∫–∞:* ${deal.deal_link}`,
                Markup.inlineKeyboard([
                    [Markup.button.url('üîç –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', deal.deal_link)]
                ])
            );
        }
    } catch (error) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫');
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateDealId() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

function getDealTypeText(type) {
  const types = {
    'gifts': '–ü–æ–¥–∞—Ä–∫–∏',
    'channel': '–ö–∞–Ω–∞–ª', 
    'nft': 'NFT –ê–∫—Ç–∏–≤—ã'
  };
  return types[type] || type;
}

function getDealTypeEmoji(type) {
  const emojis = {
    'gifts': 'üéÅ',
    'channel': 'üì¢', 
    'nft': 'üÜï'
  };
  return emojis[type] || 'üíº';
}

function getStatusEmoji(status) {
  const emojis = {
    'active': 'üü¢',
    'paid': 'üü°',
    'completed': 'üîµ',
    'cancelled': 'üî¥'
  };
  return emojis[status] || '‚ö™';
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
async function handleBuyerFlow(ctx, startPayload) {
    const dealId = startPayload.replace('deal_', '');
    
    try {
        const result = await dbQuery(
            'SELECT * FROM deals WHERE deal_id = $1',
            [dealId]
        );

        if (result.rows.length === 0) {
            await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        const deal = result.rows[0];
        
        await ctx.reply(
            `üõçÔ∏è **–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞**\n\n` +
            `üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ:*\n` +
            `üÜî ID: #${deal.deal_id}\n` +
            `üì¶ –¢–æ–≤–∞—Ä: ${deal.product_info}\n` +
            `üí∞ –°—É–º–º–∞: ${deal.amount} ${deal.currency}\n\n` +
            `üí≥ *–î–ª—è –æ–ø–ª–∞—Ç—ã:*\n` +
            `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n` +
            `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:*\n` +
            `–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ`,
            Markup.inlineKeyboard([
                [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞', `pay_${deal.deal_id}`)]
            ])
        );
    } catch (error) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–∫–∏');
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initDB().then(() => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
  bot.launch()
    .then(() => console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'))
    .catch(err => console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message));
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
