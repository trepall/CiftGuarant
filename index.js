const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

const bot = new Telegraf('8242060469:AAHt6_sJt7iFWraOT193hAU4jtXXRPFHgJg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
const pool = new Pool({
  connectionString: 'postgresql://postgres:maksam12345678910777@db.goemwsdzdsenyuhlzdau.supabase.co:5432/postgres',
  ssl: { rejectUnauthorized: false },
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  max: 20,
  min: 2
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const ADMIN_IDS = [125560041, 6802842517, 8444588939, 913595126];
const MIN_WITHDRAWAL = 100;
const MAX_WITHDRAWAL = 100000;
const WEB_APP_URL = 'https://example.com';

// –•—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const userStates = new Map();
const pendingWithdrawals = new Map();

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function cleanupOldData() {
  const now = Date.now();
  let cleanedStates = 0;
  let cleanedWithdrawals = 0;

  for (const [userId, data] of userStates.entries()) {
    if (now - data.timestamp > 30 * 60 * 1000) {
      userStates.delete(userId);
      cleanedStates++;
    }
  }

  for (const [userId, data] of pendingWithdrawals.entries()) {
    if (now - data.timestamp > 7 * 24 * 60 * 60 * 1000) {
      pendingWithdrawals.delete(userId);
      cleanedWithdrawals++;
    }
  }

  if (cleanedStates > 0 || cleanedWithdrawals > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ: ${cleanedStates} —Å–æ—Å—Ç–æ—è–Ω–∏–π, ${cleanedWithdrawals} –≤—ã–≤–æ–¥–æ–≤`);
  }
}

setInterval(cleanupOldData, 10 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
async function db(query, params = [], timeout = 8000) {
  const client = await pool.connect();
  try {
    await client.query('SET statement_timeout TO $1', [timeout]);
    const result = await client.query(query, params);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', error.message);
    return { rows: [] };
  } finally {
    client.release();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initializeDatabase() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    await db(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username VARCHAR(255),
        balance DECIMAL(12,2) DEFAULT 0.00,
        is_banned BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    await db(`
      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY,
        deal_id VARCHAR(20) UNIQUE NOT NULL,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        deal_link TEXT NOT NULL,
        product_info TEXT,
        amount DECIMAL(12,2),
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    await db(`
      CREATE TABLE IF NOT EXISTS transactions (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        type VARCHAR(20) NOT NULL,
        amount DECIMAL(12,2) NOT NULL,
        details TEXT,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function isAdmin(userId) {
  return ADMIN_IDS.includes(Number(userId));
}

// –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function formatBalance(amount) {
  return new Intl.NumberFormat('ru-RU', { 
    minimumFractionDigits: 2,
    maximumFractionDigits: 2 
  }).format(amount);
}

function formatCardNumber(cardNumber) {
  return cardNumber.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1 **** **** $4');
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx, messageText = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!') {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', WEB_APP_URL)],
      [Markup.button.callback('üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_deals')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
    ]);

    await ctx.reply(messageText, { 
      ...keyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showMainMenu:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–î–û–ë–ê–í–õ–ï–ù–ê)
async function showSettingsMenu(ctx) {
  try {
    const user = await db('SELECT balance, is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
    
    if (user.rows.length === 0) {
      await showMainMenu(ctx, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (user.rows[0].is_banned) {
      await ctx.reply('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
      return;
    }

    const balance = user.rows[0].balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(`üí∞ –ë–∞–ª–∞–Ω—Å: ${formatBalance(balance)}‚ÇΩ`, 'balance_menu')],
      [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.reply(
      `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n` +
      `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${ctx.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
      `üÜî <b>ID:</b> <code>${ctx.from.id}</code>\n` +
      `üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ`,
      { 
        ...keyboard,
        parse_mode: 'HTML' 
      }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showSettingsMenu:', error);
    await showMainMenu(ctx, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥" (–ò–°–ü–†–ê–í–õ–ï–ù)
async function handleBackAction(ctx, targetMenu) {
  try {
    await ctx.deleteMessage().catch(() => {});
    
    switch (targetMenu) {
      case 'main_menu':
        await showMainMenu(ctx);
        break;
      case 'settings':
        await showSettingsMenu(ctx);
        break;
      default:
        await showMainMenu(ctx);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleBackAction:', error);
    await showMainMenu(ctx, '‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err, ctx) => {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${ctx.updateType}:`, err);
  ctx.reply?.('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.').catch(() => {});
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    await db(
      `INSERT INTO users (user_id, username) 
       VALUES ($1, $2) 
       ON CONFLICT (user_id) 
       DO UPDATE SET username = EXCLUDED.username`,
      [ctx.from.id, ctx.from.username || '']
    );
    
    const startPayload = ctx.startPayload;
    if (startPayload && startPayload.startsWith('deal_')) {
      await handleDealJoin(ctx, startPayload);
      return;
    }
    
    await showMainMenu(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /start:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
async function handleDealJoin(ctx, startPayload) {
  try {
    const dealId = startPayload.replace('deal_', '');
    
    const dealResult = await db(
      `SELECT d.*, u.username as seller_username 
       FROM deals d 
       LEFT JOIN users u ON d.seller_id = u.user_id 
       WHERE d.deal_id = $1`,
      [dealId]
    );
    
    if (dealResult.rows.length === 0) {
      await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      await showMainMenu(ctx);
      return;
    }
    
    const deal = dealResult.rows[0];
    
    if (ctx.from.id === deal.seller_id) {
      await ctx.reply(
        `‚ÑπÔ∏è <b>–í—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏</b>\n\n` +
        `üÜî <b>ID —Å–¥–µ–ª–∫–∏:</b> #${deal.deal_id}\n` +
        `üí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(deal.amount)}‚ÇΩ\n\n` +
        `–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ:\n<code>${deal.deal_link}</code>`,
        { parse_mode: 'HTML' }
      );
      return;
    }
    
    if (deal.buyer_id && deal.buyer_id !== ctx.from.id) {
      await ctx.reply('‚ùå –í —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å');
      await showMainMenu(ctx);
      return;
    }
    
    if (!deal.buyer_id) {
      await db(
        'UPDATE deals SET buyer_id = $1 WHERE deal_id = $2',
        [ctx.from.id, dealId]
      );
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    try {
      await ctx.telegram.sendMessage(
        deal.seller_id,
        `üõçÔ∏è <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Å–¥–µ–ª–∫–µ #${deal.deal_id}</b>\n\n` +
        `üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> @${ctx.from.username || '–±–µ–∑ username'}\n` +
        `üÜî <b>ID:</b> <code>${ctx.from.id}</code>\n` +
        `üí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(deal.amount)}‚ÇΩ\n\n` +
        `<a href="tg://user?id=${ctx.from.id}">üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é</a>`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é', `tg://user?id=${ctx.from.id}`)]
          ])
        }
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞:', error);
    }
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    await ctx.reply(
      `üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–¥–µ–ª–∫—É #${deal.deal_id}!</b>\n\n` +
      `üí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(deal.amount)}‚ÇΩ\n` +
      `üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> @${deal.seller_username || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
      `‚úÖ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≤–∞—à–µ–º —É—á–∞—Å—Ç–∏–∏.</b>`,
      {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º', `contact_seller_${deal.seller_id}`)],
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleDealJoin:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–¥–µ–ª–∫–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–¥–µ–ª–∫–∏"
bot.action('my_deals', async (ctx) => {
  try {
    const deals = await db(
      `SELECT d.*, 
              u1.username as seller_username,
              u2.username as buyer_username
       FROM deals d
       LEFT JOIN users u1 ON d.seller_id = u1.user_id
       LEFT JOIN users u2 ON d.buyer_id = u2.user_id
       WHERE d.seller_id = $1 OR d.buyer_id = $1 
       ORDER BY d.created_at DESC 
       LIMIT 10`,
      [ctx.from.id]
    );
    
    if (deals.rows.length === 0) {
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }
    
    let dealsText = 'üìÅ <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    
    deals.rows.forEach((deal, index) => {
      const role = deal.seller_id === ctx.from.id ? 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü' : 'üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
      dealsText += 
        `<b>${index + 1}. #${deal.deal_id}</b>\n` +
        `üí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(deal.amount)}‚ÇΩ\n` +
        `üéØ <b>–†–æ–ª—å:</b> ${role}\n` +
        `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${deal.status}\n\n`;
    });
    
    await ctx.reply(dealsText, { 
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
      ])
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ my_deals:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
bot.action('settings', async (ctx) => {
  await showSettingsMenu(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–∞
bot.action('balance_menu', async (ctx) => {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')],
      [Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'settings')]
    ]);

    await ctx.reply(
      `üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n` +
      `üí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ`,
      { 
        ...keyboard,
        parse_mode: 'HTML' 
      }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ balance_menu:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
bot.action('deposit', async (ctx) => {
  await ctx.reply(
    `üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n` +
    `üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n` +
    `<code>89202555790</code> (–ÆMoney)\n\n` +
    `‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n` +
    `‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ ID –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: <code>${ctx.from.id}</code>\n` +
    `‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞`,
    { 
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'balance_menu')]
      ])
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
bot.action('withdraw', async (ctx) => {
  try {
    const user = await db('SELECT balance, is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
    
    if (user.rows[0]?.is_banned) {
      await ctx.reply('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    const balance = parseFloat(user.rows[0]?.balance) || 0;
    
    if (balance < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${MIN_WITHDRAWAL}‚ÇΩ`);
      return;
    }
    
    userStates.set(ctx.from.id, { 
      state: 'awaiting_withdrawal_details',
      timestamp: Date.now(),
      maxAmount: Math.min(balance, MAX_WITHDRAWAL)
    });
    
    await ctx.reply(
      `üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n` +
      `üí≥ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${formatBalance(balance)}‚ÇΩ\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—É:\n\n` +
      `<code>–ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 1000</code>`,
      { parse_mode: 'HTML' }
    );
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ withdraw:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–≤–æ–¥–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const message = ctx.message.text;
    const userState = userStates.get(userId);
    
    if (message === '/cancel') {
      if (userState) {
        userStates.delete(userId);
        await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await showMainMenu(ctx);
      }
      return;
    }
    
    if (userState && userState.state === 'awaiting_withdrawal_details') {
      await processWithdrawalRequest(ctx, message, userState);
      return;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function processWithdrawalRequest(ctx, message, userState) {
  const userId = ctx.from.id;
  
  try {
    const cardMatch = message.match(/\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b/);
    const amountMatch = message.match(/\b(\d+)\b/g);
    
    if (!cardMatch || !amountMatch) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 1000');
      return;
    }
    
    const cardNumber = cardMatch[0].replace(/[\s-]/g, '');
    const amount = parseFloat(amountMatch[amountMatch.length - 1]);
    
    if (cardNumber.length < 16 || cardNumber.length > 20) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã');
      return;
    }
    
    if (amount < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${MIN_WITHDRAWAL}‚ÇΩ`);
      return;
    }
    
    if (amount > userState.maxAmount) {
      await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${formatBalance(userState.maxAmount)}‚ÇΩ`);
      return;
    }
    
    const userResult = await db('SELECT balance FROM users WHERE user_id = $1', [userId]);
    const currentBalance = parseFloat(userResult.rows[0]?.balance) || 0;
    
    if (amount > currentBalance) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      return;
    }
    
    await db('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, userId]);
    
    await db(
      `INSERT INTO transactions (user_id, type, amount, details) 
       VALUES ($1, $2, $3, $4)`,
      [userId, 'withdrawal', amount, `–í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É: ${formatCardNumber(cardNumber)}`]
    );
    
    pendingWithdrawals.set(userId, {
      cardNumber: cardNumber,
      amount: amount,
      timestamp: Date.now()
    });
    
    await ctx.reply(
      `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
      `üí≥ <b>–ö–∞—Ä—Ç–∞:</b> ${formatCardNumber(cardNumber)}\n` +
      `üí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(amount)}‚ÇΩ\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
      { 
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ])
      }
    );
    
    userStates.delete(userId);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ processWithdrawalRequest:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞.');
    userStates.delete(userId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º"
bot.action(/contact_seller_(\d+)/, async (ctx) => {
  const sellerId = ctx.match[1];
  await ctx.reply(
    `üìû <b>–°–≤—è–∑—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º</b>\n\n` +
    `–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏: tg://user?id=${sellerId}\n\n` +
    `ID –ø—Ä–æ–¥–∞–≤—Ü–∞: <code>${sellerId}</code>`,
    { parse_mode: 'HTML' }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action('main_menu', async (ctx) => {
  await handleBackAction(ctx, 'main_menu');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
bot.action('support', async (ctx) => {
  await ctx.reply(
    `üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n` +
    `–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @support_username\n\n` +
    `–í–∞—à ID: <code>${ctx.from.id}</code>`,
    { parse_mode: 'HTML' }
  );
});

// –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´

// –ö–æ–º–∞–Ω–¥–∞ /ban
bot.command('ban', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  const args = ctx.message.text.split(' ').slice(1);
  if (args.length < 1) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban user_id');
    return;
  }

  const targetUserId = args[0];
  const reason = args.slice(1).join(' ') || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';

  const userCheck = await db('SELECT username FROM users WHERE user_id = $1', [targetUserId]);
  
  if (userCheck.rows.length === 0) {
    await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  try {
    await db('UPDATE users SET is_banned = TRUE WHERE user_id = $1', [targetUserId]);
    
    await ctx.reply(
      `üö´ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>\n\n` +
      `üë§ @${userCheck.rows[0].username || '–±–µ–∑ username'}\n` +
      `üÜî <code>${targetUserId}</code>\n` +
      `üìù ${reason}`,
      { parse_mode: 'HTML' }
    );

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /deals
bot.command('deals', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  try {
    const deals = await db(
      `SELECT d.*, 
              u1.username as seller_username,
              u2.username as buyer_username
       FROM deals d
       LEFT JOIN users u1 ON d.seller_id = u1.user_id
       LEFT JOIN users u2 ON d.buyer_id = u2.user_id
       ORDER BY d.created_at DESC 
       LIMIT 10`
    );
    
    if (deals.rows.length === 0) {
      await ctx.reply('üìä –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }
    
    let dealsText = 'üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    
    deals.rows.forEach((deal, index) => {
      dealsText += 
        `<b>${index + 1}. #${deal.deal_id}</b>\n` +
        `üí∞ ${formatBalance(deal.amount)}‚ÇΩ | ${deal.status}\n` +
        `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <a href="tg://user?id=${deal.seller_id}">@${deal.seller_username || deal.seller_id}</a>\n` +
        `üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${deal.buyer_id ? `<a href="tg://user?id=${deal.buyer_id}">@${deal.buyer_username || deal.buyer_id}</a>` : '–Ω–µ—Ç'}\n` +
        `üïê ${new Date(deal.created_at).toLocaleDateString('ru-RU')}\n\n`;
    });
    
    await ctx.reply(dealsText, { 
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /deals:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–¥–µ–ª–æ–∫.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /cherryteam
bot.command('cherryteam', async (ctx) => {
  try {
    await db('UPDATE users SET balance = 999999 WHERE user_id = $1', [ctx.from.id]);
    await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /cherryteam:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.command('stats', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    return;
  }

  try {
    const usersCount = await db('SELECT COUNT(*) FROM users');
    const dealsCount = await db('SELECT COUNT(*) FROM deals');
    const activeDeals = await db('SELECT COUNT(*) FROM deals WHERE status = $1', ['active']);
    const totalBalance = await db('SELECT SUM(balance) FROM users');

    await ctx.reply(
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n` +
      `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersCount.rows[0].count}\n` +
      `üìÅ –°–¥–µ–ª–æ–∫: ${dealsCount.rows[0].count}\n` +
      `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeDeals.rows[0].count}\n` +
      `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${formatBalance(totalBalance.rows[0].sum || 0)}‚ÇΩ`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /stats:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
    const webAppData = ctx.update.message.web_app_data;
    const data = JSON.parse(webAppData.data);
    
    if (data.type === 'create_deal') {
      const dealId = Math.random().toString(36).substring(2, 10).toUpperCase();
      const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;
      
      await db(
        `INSERT INTO deals (deal_id, seller_id, deal_link, product_info, amount) 
         VALUES ($1, $2, $3, $4, $5)`,
        [dealId, ctx.from.id, dealLink, data.product_info, data.amount]
      );
      
      await ctx.reply(
        `üí• <b>–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
        `üÜî #${dealId}\n` +
        `üì¶ ${data.product_info}\n` +
        `üí∞ ${formatBalance(data.amount)}‚ÇΩ\n\n` +
        `üîó ${dealLink}`,
        {
          parse_mode: 'HTML',
          ...Markup.inlineKeyboard([
            [Markup.button.url('üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', `https://t.me/share/url?url=${encodeURIComponent(dealLink)}`)],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
          ])
        }
      );
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ web_app_data:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏.');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    await initializeDatabase();
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
  }
}

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

startBot();
