const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
const bot = new Telegraf('8242060469:AAHt6_sJt7iFWraOT193hAU4jtXXRPFHgJg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: 'postgresql://postgres:maksam12345678910777@db.goemwsdzdsenyuhlzdau.supabase.co:5432/postgres',
  ssl: { rejectUnauthorized: false }
});

// URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGES = {
  main: 'https://i.ibb.co/JjTY2k5w/image.jpg',
  deal: 'https://i.ibb.co/7N4dmwFQ/image.jpg',
  settings: 'https://i.ibb.co/JjTY2k5w/image.jpg'
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        balance DECIMAL DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        requisites TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–¥–µ–ª–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await pool.query(`
      CREATE TABLE IF NOT EXISTS deals (
        deal_id TEXT PRIMARY KEY,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        product_info TEXT DEFAULT '–¢–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞',
        amount DECIMAL DEFAULT 1000,
        currency TEXT DEFAULT 'RUB',
        deal_link TEXT NOT NULL,
        status TEXT DEFAULT 'active',
        seller_confirmed BOOLEAN DEFAULT FALSE,
        buyer_confirmed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `);
    
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(userId, username, firstName) {
  try {
    await pool.query(
      `INSERT INTO users (user_id, username, first_name) 
       VALUES ($1, $2, $3) 
       ON CONFLICT (user_id) 
       DO UPDATE SET username = $2, first_name = $3`,
      [userId, username || '', firstName || '']
    );
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞
async function checkUserBan(userId) {
  try {
    const result = await pool.query(
      'SELECT is_banned FROM users WHERE user_id = $1',
      [userId]
    );
    return result.rows[0]?.is_banned || false;
  } catch (error) {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function displayMainMenu(ctx) {
  try {
    const caption = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüíº *–ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!*\n‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!\n\nüîπ –ù–∏–∫–∞–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\nüíå –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', 'https://example.com')],
      [Markup.button.callback('üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_deals')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
    ]);

    await ctx.replyWithPhoto(IMAGES.main, {
      caption,
      parse_mode: 'Markdown',
      ...keyboard
    });
  } catch (error) {
    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  try {
    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${ctx.from.id}`);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userRegistered = await registerUser(
      ctx.from.id, 
      ctx.from.username, 
      ctx.from.first_name
    );
    
    if (!userRegistered) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    const isBanned = await checkUserBan(ctx.from.id);
    if (isBanned) {
      await ctx.reply('üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫—É
    if (ctx.startPayload && ctx.startPayload.startsWith('deal_')) {
      await handleDealLink(ctx);
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await displayMainMenu(ctx);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–¥–µ–ª–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ
async function handleDealLink(ctx) {
  try {
    const dealId = ctx.startPayload.replace('deal_', '');
    
    // –ò—â–µ–º —Å–¥–µ–ª–∫—É –≤ –±–∞–∑–µ
    const dealResult = await pool.query(
      'SELECT * FROM deals WHERE deal_id = $1',
      [dealId]
    );
    
    if (dealResult.rows.length === 0) {
      await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      await displayMainMenu(ctx);
      return;
    }
    
    const deal = dealResult.rows[0];
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–¥–∞–≤–µ—Ü
    if (deal.seller_id === ctx.from.id) {
      await ctx.reply(`üîó –≠—Ç–æ –≤–∞—à–∞ —Å–¥–µ–ª–∫–∞ #${dealId}`);
      await displayMainMenu(ctx);
      return;
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
    await ctx.telegram.sendMessage(
      deal.seller_id,
      `üë§ *–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!*\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ —Å–¥–µ–ª–∫—É #${dealId}`,
      { parse_mode: 'Markdown' }
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    const caption = `üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #${dealId}*\n\nüë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ\nüí∞ –°—É–º–º–∞: ${deal.amount} ${deal.currency}\nüìù ${deal.product_info}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞', `pay_${dealId}`)],
      [Markup.button.callback('‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);

    await ctx.replyWithPhoto(IMAGES.deal, {
      caption,
      parse_mode: 'Markdown',
      ...keyboard
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–¥–µ–ª–∫–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–∫–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
bot.action('main_menu', async (ctx) => {
  try {
    await ctx.deleteMessage();
    await displayMainMenu(ctx);
  } catch (error) {
    await displayMainMenu(ctx);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Å–¥–µ–ª–∫–∏"
bot.action('my_deals', async (ctx) => {
  try {
    const dealsResult = await pool.query(
      'SELECT * FROM deals WHERE seller_id = $1 OR buyer_id = $1 ORDER BY created_at DESC',
      [ctx.from.id]
    );
    
    if (dealsResult.rows.length === 0) {
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }
    
    const keyboard = Markup.inlineKeyboard([
      ...dealsResult.rows.map(deal => [
        Markup.button.callback(`#${deal.deal_id} - ${deal.status}`, `deal_${deal.deal_id}`)
      ]),
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
    ]);
    
    await ctx.reply('üìÅ *–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', {
      parse_mode: 'Markdown',
      ...keyboard
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
bot.action('settings', async (ctx) => {
  try {
    const userResult = await pool.query(
      'SELECT balance FROM users WHERE user_id = $1',
      [ctx.from.id]
    );
    
    const balance = userResult.rows[0]?.balance || 0;
    const caption = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\nüåé –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance_menu')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.replyWithPhoto(IMAGES.settings, {
      caption,
      parse_mode: 'Markdown',
      ...keyboard
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
  }
});

// –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('cherryteam', async (ctx) => {
  try {
    await pool.query(
      'UPDATE users SET balance = 999999 WHERE user_id = $1',
      [ctx.from.id]
    );
    await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
  }
});

bot.command('ban', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    if (args.length < 2) {
      await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>');
      return;
    }
    
    const userId = parseInt(args[1]);
    await pool.query(
      'UPDATE users SET is_banned = TRUE WHERE user_id = $1',
      [userId]
    );
    await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
});

bot.command('deals', async (ctx) => {
  try {
    const dealsResult = await pool.query(
      'SELECT * FROM deals ORDER BY created_at DESC LIMIT 10'
    );
    
    if (dealsResult.rows.length === 0) {
      await ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –Ω–µ—Ç');
      return;
    }
    
    let caption = 'üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:*\n\n';
    dealsResult.rows.forEach(deal => {
      caption += `#${deal.deal_id} - ${deal.status} - ${deal.seller_id}\n`;
    });
    
    await ctx.reply(caption, { parse_mode: 'Markdown' });
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
  }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await initializeDatabase();
    
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    await bot.launch();
    
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log(`ü§ñ –ë–æ—Ç: @${bot.context.botInfo.username}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
