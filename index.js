require('dotenv').config();
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ë–æ—Ç
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ê–¥–º–∏–Ω—Å–∫–∏–µ ID - –¢–û–õ–¨–ö–û –î–õ–Ø /deals –∏ /ban
const ADMIN_IDS = [6802842517, 913595126, 125560041, 8444588939];

function isAdmin(userId) { 
    return ADMIN_IDS.includes(Number(userId)); 
}

// SQL
async function dbQuery(query, params = []) {
  try { 
    const result = await pool.query(query, params);
    return result;
  }
  catch (e) { 
    console.error('DB error:', e.message, 'Query:', query); 
    throw e; 
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
async function initDB() {
  try {
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        requisites TEXT,
        balance DECIMAL(15,2) DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY,
        deal_id VARCHAR(50) UNIQUE NOT NULL,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        deal_type VARCHAR(50) NOT NULL,
        product_info TEXT NOT NULL,
        currency VARCHAR(20),
        amount DECIMAL(15,2),
        deal_link TEXT NOT NULL,
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW(),
        updated_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    await dbQuery(`
      CREATE TABLE IF NOT EXISTS withdrawals (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        requisites TEXT NOT NULL,
        amount DECIMAL(15,2) NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        created_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
  }
}

// –°—Ü–µ–Ω—ã
const requisitesScene = new Scenes.BaseScene('requisites');
const createDealScene = new Scenes.BaseScene('createDeal');
const withdrawScene = new Scenes.BaseScene('withdraw');
const stage = new Scenes.Stage([requisitesScene, createDealScene, withdrawScene]);
bot.use(session());
bot.use(stage.middleware());

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
async function checkIfBanned(userId) {
    try {
        const result = await dbQuery(
            'SELECT is_banned FROM users WHERE user_id = $1',
            [userId]
        );
        return result.rows[0]?.is_banned || false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞:', error);
        return false;
    }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
  const caption = `üéØ *GiftGuarant*\nüõ°Ô∏è –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫\n\n‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n‚úÖ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n‚úÖ –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n\nüí´ –í–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°Ô∏è`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
    [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
    [Markup.button.callback('üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'myDeals')],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings')]
  ]);

  try {
    await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
  }
}

// –†–µ–∫–≤–∏–∑–∏—Ç—ã
requisitesScene.enter(async (ctx) => {
  const caption = `üí≥ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤*\n\nüìù *–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:*\n‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞  \n‚Ä¢ –ö—Ä–∏–ø—Ç–æ-–∫–æ—à–µ–ª–µ–∫\n\n*–ü—Ä–∏–º–µ—Ä:*\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–¢–µ–ª–µ—Ñ–æ–Ω: +79991234567\n–ö—Ä–∏–ø—Ç–æ: UQB123...abc`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
  ]);

  try {
    await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
  }
});

requisitesScene.on('text', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    
    const requisites = ctx.message.text.trim();
    
    if (!requisites || requisites.length < 5) {
      await ctx.reply('‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.');
      return;
    }
    
    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –≤ –ë–î...');
    
    const result = await dbQuery(
      `INSERT INTO users (user_id, username, first_name, last_name, requisites) 
       VALUES ($1, $2, $3, $4, $5) 
       ON CONFLICT (user_id) 
       DO UPDATE SET requisites = $5, updated_at = NOW()`,
      [
        ctx.from.id, 
        ctx.from.username || '', 
        ctx.from.first_name || '', 
        ctx.from.last_name || '', 
        requisites
      ]
    );
    
    console.log('–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
    await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    await showMainMenu(ctx);
    return ctx.scene.leave();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
createDealScene.enter(async (ctx) => {
  try {
    const isBanned = await checkIfBanned(ctx.from.id);
    if (isBanned) {
      await ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏');
      return ctx.scene.leave();
    }

    if (!ctx.session.dealData) {
      ctx.session.dealData = {};
    }

    const caption = `üõçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üéÅ –ü–æ–¥–∞—Ä–∫–∏', 'deal_gifts')],
      [Markup.button.callback('üì¢ –ö–∞–Ω–∞–ª', 'deal_channel')],
      [Markup.button.callback('üÜï NFT –ê–∫—Ç–∏–≤—ã', 'deal_nft')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
    ]);

    await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
bot.action(/deal_(.+)/, async (ctx) => {
  try {
    if (!ctx.session.dealData) {
      ctx.session.dealData = {};
    }
    ctx.session.dealData.dealType = ctx.match[1];
    
    const caption = `–í—ã –≤—ã–±—Ä–∞–ª–∏: *${getDealTypeText(ctx.session.dealData.dealType)}*\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]
    ]);

    await ctx.editMessageText(caption, { 
      parse_mode: 'Markdown', 
      ...keyboard 
    });
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è, –≤–∞–ª—é—Ç—ã, —Å—É–º–º—ã
createDealScene.on('text', async (ctx) => {
  try {
    if (!ctx.session.dealData) {
      ctx.session.dealData = {};
    }
    
    const messageText = ctx.message.text.trim();
    
    if (!ctx.session.dealData.productInfo) {
      ctx.session.dealData.productInfo = messageText;
      
      const caption = `üíµ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üíé TON', 'currency_TON'), Markup.button.callback('üíµ USDT', 'currency_USDT')],
        [Markup.button.callback('‚≠êÔ∏è STARS', 'currency_STARS'), Markup.button.callback('üá∑üá∫ RUB', 'currency_RUB')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]
      ]);

      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
      return;
    }
    
    if (ctx.session.dealData.waitingForAmount) {
      const amount = parseFloat(messageText.replace(',', '.'));
      
      console.log('–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞:', amount, '–¢–µ–∫—Å—Ç:', messageText);
      
      if (isNaN(amount) || amount <= 0) { 
        await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)'); 
        return; 
      }
      
      ctx.session.dealData.amount = amount;

      const dealId = Math.random().toString(36).substring(2, 8).toUpperCase();
      const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;
      
      console.log('–°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ –ë–î:', {
        dealId,
        sellerId: ctx.from.id,
        dealType: ctx.session.dealData.dealType,
        productInfo: ctx.session.dealData.productInfo,
        currency: ctx.session.dealData.currency,
        amount: ctx.session.dealData.amount,
        dealLink
      });
      
      await dbQuery(
        `INSERT INTO deals (deal_id, seller_id, deal_type, product_info, currency, amount, deal_link) 
         VALUES ($1, $2, $3, $4, $5, $6, $7)`,
        [
          dealId, 
          ctx.from.id, 
          ctx.session.dealData.dealType, 
          ctx.session.dealData.productInfo, 
          ctx.session.dealData.currency, 
          ctx.session.dealData.amount, 
          dealLink
        ]
      );

      const caption = `üéâ *–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìã ID: ${dealId}\nüéØ –¢–∏–ø: ${getDealTypeText(ctx.session.dealData.dealType)}\nüí∞ –°—É–º–º–∞: ${ctx.session.dealData.amount} ${ctx.session.dealData.currency}\nüîó –°—Å—ã–ª–∫–∞: ${dealLink}\n\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${ctx.session.dealData.productInfo}`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'mainMenu')]
      ]);

      await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });

      ctx.session.dealData = {};
      
      return ctx.scene.leave();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
bot.action(/currency_(.+)/, async (ctx) => {
  try {
    if (!ctx.session.dealData) {
      ctx.session.dealData = {};
    }
    ctx.session.dealData.currency = ctx.match[1];
    ctx.session.dealData.waitingForAmount = true;
    
    const caption = `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ ${ctx.session.dealData.currency}:\n\n*–ü—Ä–∏–º–µ—Ä:* 1000 –∏–ª–∏ 150.50`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'createDeal')]
    ]);

    await ctx.editMessageText(caption, { 
      parse_mode: 'Markdown', 
      ...keyboard 
    });
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –ú–æ–∏ —Å–¥–µ–ª–∫–∏
bot.action('myDeals', async (ctx) => {
  try {
    const result = await dbQuery(
      'SELECT * FROM deals WHERE seller_id = $1 ORDER BY created_at DESC LIMIT 10', 
      [ctx.from.id]
    );
    
    if (!result.rows.length) {
      const caption = `üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫*\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É!`;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', 'createDeal')],
        [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
      ]);

      await ctx.editMessageText(caption, { 
        parse_mode: 'Markdown', 
        ...keyboard 
      });
      return;
    }
    
    const deal = result.rows[0];
    const caption = `üìã *–°–¥–µ–ª–∫–∞ #${deal.deal_id}*\nüéØ –¢–∏–ø: ${getDealTypeEmoji(deal.deal_type)} ${getDealTypeText(deal.deal_type)}\nüí∞ –°—É–º–º–∞: ${deal.amount || 0} ${deal.currency || ''}\nüìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(deal.status)} ${deal.status}\nüïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleDateString('ru-RU')}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì± –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É', deal.deal_link)],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
    ]);

    await ctx.editMessageText(caption, { 
      parse_mode: 'Markdown', 
      ...keyboard 
    });
    
    await ctx.answerCbQuery();
  } catch (e) { 
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫:', e);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
bot.action('settings', async (ctx) => {
  try {
    const userRes = await dbQuery(
      'SELECT balance, successful_deals, requisites FROM users WHERE user_id = $1', 
      [ctx.from.id]
    );
    const user = userRes.rows[0] || { balance: 0, successful_deals: 0, requisites: null };
    
    const requisitesStatus = user.requisites ? '—É–∫–∞–∑–∞–Ω—ã' : '–Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    
    const caption = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance}‚ÇΩ\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${user.successful_deals}\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: ${requisitesStatus}`;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')],
      [Markup.button.callback('üè¶ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw')],
      [Markup.button.callback('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'requisites')],
      [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'mainMenu')]
    ]);

    await ctx.editMessageText(caption, { 
      parse_mode: 'Markdown', 
      ...keyboard 
    });
    
    await ctx.answerCbQuery();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.action('mainMenu', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  }
  await showMainMenu(ctx);
  await ctx.answerCbQuery();
});

bot.action('requisites', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  }
  await ctx.scene.enter('requisites');
  await ctx.answerCbQuery();
});

bot.action('createDeal', async (ctx) => {
  try {
    await ctx.deleteMessage();
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
  }
  await ctx.scene.enter('createDeal');
  await ctx.answerCbQuery();
});

bot.action('deposit', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('üí∞ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin');
});

bot.action('withdraw', async (ctx) => {
  await ctx.scene.enter('withdraw');
  await ctx.answerCbQuery();
});

// –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´

// –ö–æ–º–∞–Ω–¥–∞ /cherryteam - –î–û–°–¢–£–ü–ù–ê –í–°–ï–ú
bot.command('cherryteam', async (ctx) => {
    try {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–µ–∂–∏–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –õ–Æ–ë–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!ctx.session) ctx.session = {};
        ctx.session.adminMode = true;
        ctx.session.unlimitedBalance = true;
        
        await ctx.reply(
            `üçí *Cherry Team Admin Mode Activated*\n\n` +
            `‚úÖ –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n` +
            `üí≥ –ú–æ–∂–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ª—é–±—ã–µ —Å–¥–µ–ª–∫–∏\n` +
            `‚ö° –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω\n\n` +
            `_–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞_`,
            { parse_mode: 'Markdown' }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã cherryteam:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /deals - –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í
bot.command('deals', async (ctx) => {
    try {
        if (!isAdmin(ctx.from.id)) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        
        const dealsResult = await dbQuery(`
            SELECT 
                d.*,
                seller.username as seller_username,
                seller.first_name as seller_name,
                buyer.username as buyer_username, 
                buyer.first_name as buyer_name
            FROM deals d
            LEFT JOIN users seller ON d.seller_id = seller.user_id
            LEFT JOIN users buyer ON d.buyer_id = buyer.user_id
            WHERE d.created_at >= $1
            ORDER BY d.created_at DESC
        `, [oneWeekAgo]);
        
        const deals = dealsResult.rows;
        
        if (!deals.length) {
            return ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É
        const deal = deals[0];
        const sellerInfo = deal.seller_username ? `@${deal.seller_username}` : `ID: ${deal.seller_id}`;
        const buyerInfo = deal.buyer_id ? (deal.buyer_username ? `@${deal.buyer_username}` : `ID: ${deal.buyer_id}`) : '‚ùå –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        
        const caption = `üìã *–°–¥–µ–ª–∫–∞ #${deal.deal_id}*\n\n` +
            `üéØ –¢–∏–ø: ${getDealTypeText(deal.deal_type)}\n` +
            `üí∞ –°—É–º–º–∞: ${deal.amount} ${deal.currency}\n` +
            `üìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(deal.status)} ${deal.status}\n\n` +
            `üë§ *–ü—Ä–æ–¥–∞–≤–µ—Ü:* ${sellerInfo}\n` +
            `üë• *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* ${buyerInfo}\n\n` +
            `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${deal.product_info}\n` +
            `üïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleString('ru-RU')}\n\n` +
            `üìÑ 1/${deals.length}`;
        
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', 'refresh_deals')],
            [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close_deals')]
        ]);

        await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã deals:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /ban - –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í
bot.command('ban', async (ctx) => {
    try {
        if (!isAdmin(ctx.from.id)) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
        }
        
        const args = ctx.message.text.split(' ');
        if (args.length < 2) {
            return ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>\n–ü—Ä–∏–º–µ—Ä: /ban 123456789');
        }
        
        const userId = parseInt(args[1]);
        if (isNaN(userId)) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        await dbQuery(
            'UPDATE users SET is_banned = TRUE WHERE user_id = $1',
            [userId]
        );
        
        await ctx.reply(
            `üö´ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*\n\n` +
            `üë§ ID: ${userId}\n\n` +
            `‚ùå –¢–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç:\n` +
            `‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏\n` +
            `‚Ä¢ –û–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏\n` +
            `‚Ä¢ –í—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞`,
            { parse_mode: 'Markdown' }
        );
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã ban:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
bot.action('refresh_deals', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }
    await ctx.deleteMessage();
    await ctx.reply('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫...');
    await ctx.answerCbQuery();
});

bot.action('close_deals', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
        await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤');
        return;
    }
    await ctx.deleteMessage();
    await ctx.answerCbQuery();
});

// /start –∫–æ–º–∞–Ω–¥–∞
bot.start(async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id, ctx.from.username);
    
    await dbQuery(
      `INSERT INTO users (user_id, username, first_name, last_name) 
       VALUES ($1, $2, $3, $4) 
       ON CONFLICT (user_id) DO NOTHING`,
      [
        ctx.from.id, 
        ctx.from.username || '', 
        ctx.from.first_name || '', 
        ctx.from.last_name || ''
      ]
    );
    
    await showMainMenu(ctx);
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ /start:', error);
    await ctx.reply('üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GiftGuarant! üõ°Ô∏è\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.');
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getDealTypeText(type) { 
  const types = { 'gifts': '–ü–æ–¥–∞—Ä–∫–∏', 'channel': '–ö–∞–Ω–∞–ª', 'nft': 'NFT –ê–∫—Ç–∏–≤—ã' }; 
  return types[type] || type; 
}

function getDealTypeEmoji(type) { 
  const emojis = { 'gifts': 'üéÅ', 'channel': 'üì¢', 'nft': 'üÜï' }; 
  return emojis[type] || 'üíº'; 
}

function getStatusEmoji(status) { 
  const emojis = { 'active': 'üü¢', 'paid': 'üü°', 'completed': 'üîµ', 'cancelled': 'üî¥' }; 
  return emojis[status] || '‚ö™'; 
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
});

// –ó–∞–ø—É—Å–∫
initDB().then(() => {
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
  });
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
