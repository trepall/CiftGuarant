// index.js
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

// ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
if (!process.env.BOT_TOKEN) {
  console.error('–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  process.exit(1);
}
if (!process.env.DATABASE_URL) {
  console.error('–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  process.exit(1);
}

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ (—Ä—É–±)
const MIN_AMOUNT = Number(process.env.MIN_AMOUNT || 10000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ë–î
const bot = new Telegraf(process.env.BOT_TOKEN);
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const IMAGES = {
  main: 'https://i.ibb.co/JjTY2k5w/image.jpg',
  deal: 'https://i.ibb.co/7N4dmwFQ/image.jpg',
  settings: 'https://i.ibb.co/JjTY2k5w/image.jpg'
};

// ======= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =======
function replyWithKeyboardOptions(inlineKeyboard) {
  return { reply_markup: { inline_keyboard: inlineKeyboard } };
}

function getStatusText(status) {
  const statuses = {
    'active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞',
    'waiting_payment': 'üü° –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
    'paid': 'üîµ –û–ø–ª–∞—á–µ–Ω–∞',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    'cancelled': 'üî¥ –û—Ç–º–µ–Ω–µ–Ω–∞'
  };
  return statuses[status] || status;
}

async function ensureUser(ctx) {
  if (!ctx || !ctx.from) return;
  try {
    await pool.query(
      'INSERT INTO users (user_id, username) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING',
      [ctx.from.id, ctx.from.username || null]
    );
  } catch (e) {
    console.error('ensureUser error:', e);
  }
}

// ======= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (—Ç–∞–±–ª–∏—Ü—ã) =======
async function initDB() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        username TEXT,
        balance DECIMAL DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        requisites TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS deals (
        deal_id TEXT PRIMARY KEY,
        seller_id BIGINT NOT NULL,
        buyer_id BIGINT,
        product_info TEXT,
        amount DECIMAL DEFAULT 1000,
        currency TEXT DEFAULT 'RUB',
        deal_link TEXT NOT NULL,
        status TEXT DEFAULT 'active',
        seller_confirmed BOOLEAN DEFAULT FALSE,
        buyer_confirmed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);

    await pool.query(`
      CREATE TABLE IF NOT EXISTS withdrawals (
        id SERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        requisites TEXT NOT NULL,
        amount DECIMAL NOT NULL,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT NOW()
      );
    `);

    console.log('‚úÖ –ë–∞–∑–∞ –≥–æ—Ç–æ–≤–∞');
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', e);
  }
}

// ======= Middleware: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞ =======
bot.use(async (ctx, next) => {
  try {
    if (ctx.from && ctx.from.id) {
      await ensureUser(ctx);
      const res = await pool.query('SELECT is_banned FROM users WHERE user_id = $1', [ctx.from.id]);
      if (res.rows[0]?.is_banned) {
        try {
          return await ctx.reply('üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.');
        } catch (e) {
          return;
        }
      }
    }
  } catch (e) {
    console.error('Middleware error:', e);
  }
  return next();
});

// ======= –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =======
async function showMainMenu(ctx) {
  const caption = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüíº –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!\n‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!\n\nüîπ –ù–∏–∫–∞–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\nüíå –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°`;

  const keyboard = [
    [{ text: 'üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', web_app: { url: 'https://example.com' } }],
    [{ text: 'üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', callback_data: 'my_deals' }],
    [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }]
  ];

  try {
    await ctx.replyWithPhoto(IMAGES.main, {
      caption,
      parse_mode: 'Markdown',
      ...replyWithKeyboardOptions(keyboard)
    });
  } catch (e) {
    console.error('showMainMenu reply error:', e);
    await ctx.reply(caption, replyWithKeyboardOptions(keyboard));
  }
}

// ======= /start =======
bot.start(async (ctx) => {
  try {
    await ensureUser(ctx);

    const payload = ctx.startPayload;
    if (payload && payload.startsWith('deal_')) {
      const dealId = payload.replace('deal_', '');
      const dealRes = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);

      if (dealRes.rows.length === 0) {
        await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return showMainMenu(ctx);
      }

      const d = dealRes.rows[0];
      if (d.seller_id === ctx.from.id) {
        await ctx.reply(`üîó –≠—Ç–æ –≤–∞—à–∞ —Å–¥–µ–ª–∫–∞ #${dealId}`);
        return showMainMenu(ctx);
      }

      const sellerRes = await pool.query('SELECT username, successful_deals FROM users WHERE user_id = $1', [d.seller_id]);
      const sellerInfo = sellerRes.rows[0] || {};

      try {
        await bot.telegram.sendMessage(
          d.seller_id,
          `üë§ –ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ —Å–¥–µ–ª–∫—É #${dealId}\n\nID: ${ctx.from.id}\nUsername: @${ctx.from.username || '–Ω–µ—Ç'}\n–ò–º—è: ${ctx.from.first_name || ''}`
        );
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞:', e.message);
      }

      const amountNum = Number(d.amount) || 0;
      const tonAmount = (amountNum / 180).toFixed(4);
      const usdtAmount = (amountNum / 90).toFixed(2);

      const caption = `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #${dealId}\n\nüë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ.\nüìå –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerInfo?.username || 'ID:' + d.seller_id}\n‚ï∞ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${sellerInfo?.successful_deals || 0}\n\nüí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: ${amountNum} RUB\nüìú –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: ${d.product_info || '–¢–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞'}\n\nüíé –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ TON: ${tonAmount}\nüíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ USDT(TON): ${usdtAmount}\nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–º–µ–º–æ): ${dealId}\n\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–º–µ–º–æ) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!`;

      const keyboard = [
        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞', callback_data: `pay_${dealId}` }],
        [{ text: '‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ];

      await ctx.replyWithPhoto(IMAGES.deal, {
        caption,
        parse_mode: 'Markdown',
        ...replyWithKeyboardOptions(keyboard)
      });
      return;
    }

    await showMainMenu(ctx);
  } catch (e) {
    console.error('/start handler error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ä—Ça.');
  }
});

// ======= –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (/create) =======
bot.command('create', async (ctx) => {
  try {
    await ensureUser(ctx);

    const dealId = Math.random().toString(36).substring(2, 10).toUpperCase();
    const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;

    await pool.query('INSERT INTO deals (deal_id, seller_id, deal_link) VALUES ($1, $2, $3)', [
      dealId,
      ctx.from.id,
      dealLink
    ]);

    const caption = `üí• –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n–¢–∏–ø —Å–¥–µ–ª–∫–∏: –û–±—â–∞—è\n\n–û—Ç–¥–∞–µ—Ç–µ: \n–ü–æ–ª—É—á–∞–µ—Ç–µ: \n\n‚õìÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n${dealLink}`;

    await ctx.replyWithPhoto(IMAGES.deal, {
      caption,
      parse_mode: 'Markdown'
    });
  } catch (e) {
    console.error('create error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.');
  }
});

// ======= –ú–æ–∏ —Å–¥–µ–ª–∫–∏ =======
bot.action('my_deals', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const res = await pool.query('SELECT * FROM deals WHERE seller_id = $1 OR buyer_id = $1 ORDER BY created_at DESC', [ctx.from.id]);

    if (res.rows.length === 0) {
      await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
      return;
    }

    const rows = res.rows.map(deal => [{ text: `#${deal.deal_id} - ${getStatusText(deal.status)}`, callback_data: `deal_${deal.deal_id}` }]);
    rows.push([{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

    await ctx.reply('üìÅ –í–∞—à–∏ —Å–¥–µ–ª–∫–∏:', replyWithKeyboardOptions(rows));
  } catch (e) {
    console.error('my_deals error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫.');
  }
});

// ======= –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ =======
bot.action(/deal_(.+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const dealId = ctx.match[1];
    const res = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
    if (res.rows.length === 0) {
      await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    const d = res.rows[0];
    const role = d.seller_id === ctx.from.id ? 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü' : 'üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å';

    let otherPartyInfo = '';
    if (d.buyer_id && d.seller_id === ctx.from.id) {
      const buyer = await pool.query('SELECT username, successful_deals FROM users WHERE user_id = $1', [d.buyer_id]);
      otherPartyInfo = `üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyer.rows[0]?.username || 'ID:' + d.buyer_id}\n‚úÖ –°–¥–µ–ª–æ–∫: ${buyer.rows[0]?.successful_deals || 0}`;
    } else if (d.seller_id && d.buyer_id === ctx.from.id) {
      const seller = await pool.query('SELECT username, successful_deals FROM users WHERE user_id = $1', [d.seller_id]);
      otherPartyInfo = `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${seller.rows[0]?.username || 'ID:' + d.seller_id}\n‚úÖ –°–¥–µ–ª–æ–∫: ${seller.rows[0]?.successful_deals || 0}`;
    }

    const caption = `üìã –°–¥–µ–ª–∫–∞ #${d.deal_id}\n\n${role}\n${otherPartyInfo}\nüí∞ –°—É–º–º–∞: ${d.amount} ${d.currency}\nüìù ${d.product_info || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüìä –°—Ç–∞—Ç—É—Å: ${getStatusText(d.status)}\nüîó ${d.deal_link}`;

    const keyboard = [[{ text: '‚è™ –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–∞–º', callback_data: 'my_deals' }]];

    await ctx.reply(caption, replyWithKeyboardOptions(keyboard));
  } catch (e) {
    console.error('deal details error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏.');
  }
});

// ======= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =======
bot.action('settings', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const res = await pool.query('SELECT balance, requisites FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = res.rows[0]?.balance || 0;
    const requisites = res.rows[0]?.requisites;

    let caption = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n`;
    caption += requisites ? `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: —É–∫–∞–∑–∞–Ω—ã\n` : `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n`;

    const keyboard = [
      [{ text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: 'balance_menu' }],
      [{ text: 'üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data: 'requisites_menu' }],
      [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
    ];

    await ctx.replyWithPhoto(IMAGES.settings, {
      caption,
      parse_mode: 'Markdown',
      ...replyWithKeyboardOptions(keyboard)
    });
  } catch (e) {
    console.error('settings error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.');
  }
});

// ======= –†–µ–∫–≤–∏–∑–∏—Ç—ã =======
bot.action('requisites_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const res = await pool.query('SELECT requisites FROM users WHERE user_id = $1', [ctx.from.id]);
    const requisites = res.rows[0]?.requisites;

    let caption = 'üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã\n\n';
    caption += requisites ? `${requisites}\n\n` : '–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n\n';
    caption += '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–¢–µ–ª–µ—Ñ–æ–Ω: +79991234567';

    await ctx.reply(caption);
  } catch (e) {
    console.error('requisites_menu error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.');
  }
});

// ======= –ë–∞–ª–∞–Ω—Å =======
bot.action('balance_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const res = await pool.query('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = res.rows[0]?.balance || 0;

    const caption = `üí∞ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
    const keyboard = [
      [{ text: 'üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data: 'deposit' }],
      [{ text: 'üì§ –í—ã–≤–µ—Å—Ç–∏', callback_data: 'withdraw' }],
      [{ text: '‚è™ –ù–∞–∑–∞–¥', callback_data: 'settings' }]
    ];

    await ctx.reply(caption, replyWithKeyboardOptions(keyboard));
  } catch (e) {
    console.error('balance_menu error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–∞–ª–∞–Ω—Å–∞.');
  }
});

// ======= –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ =======
bot.action('deposit', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    await ctx.reply(`üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî ${MIN_AMOUNT}‚ÇΩ.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞:\nüìû 89202555790\nüí≥ –Æ–º–∞–Ω–∏\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
  } catch (e) {
    console.error('deposit error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏.');
  }
});

// ======= –í—ã–≤–æ–¥ =======
bot.action('withdraw', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const res = await pool.query('SELECT balance, requisites FROM users WHERE user_id = $1', [ctx.from.id]);
    const balance = Number(res.rows[0]?.balance) || 0;
    const requisites = res.rows[0]?.requisites;

    let caption = `üì§ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n`;
    if (requisites) caption += `üí≥ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: ${requisites}\n\n`;
    caption += `–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n–ü—Ä–∏–º–µ—Ä:\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–°—É–º–º–∞: ${MIN_AMOUNT}`;

    await ctx.reply(caption);
  } catch (e) {
    console.error('withdraw action error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ.');
  }
});

// ======= –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥) =======
bot.on('text', async (ctx) => {
  try {
    const text = ctx.message.text;
    if (text.startsWith('/')) return;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    if (text.includes('–ö–∞—Ä—Ç–∞:') || text.includes('–¢–µ–ª–µ—Ñ–æ–Ω:') || text.includes('–ö—Ä–∏–ø—Ç–æ:')) {
      await pool.query('UPDATE users SET requisites = $1 WHERE user_id = $2', [text, ctx.from.id]);
      await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
      return;
    }

    // –ü–æ–∏—Å–∫ —Å—É–º–º—ã
    const sumMatch = text.match(/[–°—Å]—É–º–º–∞:\s*([\d\s]+)/) || text.match(/(\d+)\s*[–†—Ä]?/);
    const amount = sumMatch ? parseInt(sumMatch[1].toString().replace(/\s+/g, ''), 10) : 0;

    if (amount && amount >= MIN_AMOUNT) {
      const userRes = await pool.query('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
      const balance = Number(userRes.rows[0]?.balance) || 0;

      if (amount <= balance) {
        await pool.query('INSERT INTO withdrawals (user_id, requisites, amount) VALUES ($1, $2, $3)', [
          ctx.from.id,
          text,
          amount
        ]);
        await pool.query('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, ctx.from.id]);

        await ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
      } else {
        await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.');
      }
      return;
    } else if (amount && amount < MIN_AMOUNT) {
      await ctx.reply(`‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî ${MIN_AMOUNT}‚ÇΩ.`);
      return;
    }

    await ctx.reply('üìå –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã ‚Äî —É–∫–∞–∂–∏—Ç–µ "–ö–∞—Ä—Ç–∞:", "–¢–µ–ª–µ—Ñ–æ–Ω:" –∏–ª–∏ "–ö—Ä–∏–ø—Ç–æ:". –î–ª—è –≤—ã–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ "–°—É–º–º–∞: <—á–∏—Å–ª–æ>".');
  } catch (e) {
    console.error('text handler error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
  }
});

// ======= –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é =======
bot.action('main_menu', async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    await ctx.deleteMessage().catch(() => {});
    await showMainMenu(ctx);
  } catch (e) {
    console.error('main_menu error:', e);
    await showMainMenu(ctx);
  }
});

// ======= –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞ =======
bot.action(/pay_(.+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const dealId = ctx.match[1];
    const dealRes = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
    if (dealRes.rows.length === 0) {
      await ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const d = dealRes.rows[0];

    const buyerRes = await pool.query('SELECT balance FROM users WHERE user_id = $1', [ctx.from.id]);
    const buyerBalance = Number(buyerRes.rows[0]?.balance) || 0;
    const amount = Number(d.amount) || 0;

    if (buyerBalance < amount) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤');
      return;
    }

    await pool.query('BEGIN');
    try {
      await pool.query('UPDATE users SET balance = balance - $1 WHERE user_id = $2', [amount, ctx.from.id]);
      await pool.query('UPDATE deals SET status = $1, buyer_id = $2 WHERE deal_id = $3', ['paid', ctx.from.id, dealId]);
      await pool.query('COMMIT');
    } catch (e) {
      await pool.query('ROLLBACK');
      throw e;
    }

    const buyerInfo = `ID: ${ctx.from.id}\nUsername: @${ctx.from.username || '–Ω–µ—Ç'}\n–ò–º—è: ${ctx.from.first_name || ''}`;
    try {
      await bot.telegram.sendMessage(
        d.seller_id,
        `üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Ç–æ–≤–∞—Ä!\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:\n${buyerInfo}\n\n–í–ê–ñ–ù–û: –ü–ï–†–ï–î–ê–í–ê–ô–¢–ï –¢–û–í–ê–† –ù–ê –ê–ö–ö–ê–£–ù–¢ –¢–ï–•.–ü–û–î–î–ï–†–ñ–ö–ò @GiftSupported\n\n–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É.`,
        {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: [[{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É', callback_data: `confirm_seller_${dealId}` }]] }
        }
      );
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –ø–ª–∞—Ç–µ–∂–µ:', e.message);
    }

    await ctx.answerCbQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    await ctx.reply('‚úÖ –°–¥–µ–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.');
  } catch (e) {
    console.error('pay action error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.');
  }
});

// ======= –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º =======
bot.action(/confirm_seller_(.+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const dealId = ctx.match[1];

    await pool.query('UPDATE deals SET seller_confirmed = TRUE WHERE deal_id = $1', [dealId]);

    const dealRes = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
    const d = dealRes.rows[0];
    if (!d) {
      await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    try {
      await bot.telegram.sendMessage(d.buyer_id, 'üéÅ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:', {
        reply_markup: { inline_keyboard: [[{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', callback_data: `confirm_buyer_${dealId}` }]] }
      });
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ–¥–∞—á–µ:', e.message);
    }

    await ctx.reply('‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.');
  } catch (e) {
    console.error('confirm_seller error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏.');
  }
});

// ======= –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º =======
bot.action(/confirm_buyer_(.+)/, async (ctx) => {
  try {
    await ctx.answerCbQuery().catch(() => {});
    const dealId = ctx.match[1];

    const dealRes = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
    if (dealRes.rows.length === 0) {
      await ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const d = dealRes.rows[0];

    await pool.query('BEGIN');
    try {
      await pool.query('UPDATE deals SET buyer_confirmed = TRUE, status = $1 WHERE deal_id = $2', ['completed', dealId]);
      await pool.query('UPDATE users SET balance = balance + $1, successful_deals = successful_deals + 1 WHERE user_id = $2', [
        d.amount,
        d.seller_id
      ]);
      await pool.query('COMMIT');
    } catch (e) {
      await pool.query('ROLLBACK');
      throw e;
    }

    try {
      await bot.telegram.sendMessage(d.seller_id, `‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${d.amount}‚ÇΩ`, {
        parse_mode: 'Markdown'
      });
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:', e.message);
    }

    await ctx.reply('‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è');
  } catch (e) {
    console.error('confirm_buyer error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è.');
  }
});

// ======= –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã =======
bot.command('cherryteam', async (ctx) => {
  try {
    const ownerId = Number(process.env.ADMIN_ID || 0);
    if (ownerId && ctx.from.id !== ownerId) return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    await pool.query('UPDATE users SET balance = 999999 WHERE user_id = $1', [ctx.from.id]);
    await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
  } catch (e) {
    console.error('cherryteam error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

bot.command('ban', async (ctx) => {
  try {
    const args = ctx.message.text.split(' ');
    if (!args[1]) return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>');
    const ownerId = Number(process.env.ADMIN_ID || 0);
    if (ownerId && ctx.from.id !== ownerId) return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω');
    const userId = args[1].trim();
    await pool.query('UPDATE users SET is_banned = TRUE WHERE user_id = $1', [userId]);
    await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
  } catch (e) {
    console.error('ban command error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

bot.command('deals', async (ctx) => {
  try {
    const res = await pool.query(`
      SELECT d.*, seller.username as seller_username, buyer.username as buyer_username
      FROM deals d
      LEFT JOIN users seller ON d.seller_id = seller.user_id
      LEFT JOIN users buyer ON d.buyer_id = buyer.user_id
      ORDER BY created_at DESC LIMIT 10
    `);
    if (res.rows.length === 0) return ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –Ω–µ—Ç');

    let text = 'üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n\n';
    res.rows.forEach(deal => {
      const seller = deal.seller_username ? `@${deal.seller_username}` : `ID:${deal.seller_id}`;
      const buyer = deal.buyer_id ? (deal.buyer_username ? `@${deal.buyer_username}` : `ID:${deal.buyer_id}`) : '–Ω–µ—Ç';
      text += `#${deal.deal_id} - ${seller} ‚Üí ${buyer} - ${deal.status}\n`;
    });
    await ctx.reply(text);
  } catch (e) {
    console.error('deals command error:', e);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–¥–µ–ª–æ–∫.');
  }
});

// ======= –ó–∞–ø—É—Å–∫ =======
initDB().then(() => {
  bot.launch()
    .then(() => console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', err));
});

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
