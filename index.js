const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –ë–ï–ó SSL –æ—à–∏–±–æ–∫
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  }
});

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–ï–ó SSL –æ—à–∏–±–æ–∫
async function initDB() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!');
    
    await client.query(`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        requisites TEXT,
        balance DECIMAL(15,2) DEFAULT 0,
        successful_deals INTEGER DEFAULT 0,
        is_banned BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMPTZ DEFAULT NOW()
      );

      CREATE TABLE IF NOT EXISTS deals (
        id SERIAL PRIMARY KEY,
        deal_id VARCHAR(50) UNIQUE NOT NULL,
        seller_id BIGINT NOT NULL,
        deal_type VARCHAR(50) NOT NULL,
        product_info TEXT NOT NULL,
        currency VARCHAR(20) NOT NULL,
        amount DECIMAL(15,2) NOT NULL,
        deal_link TEXT NOT NULL,
        status VARCHAR(20) DEFAULT 'active',
        created_at TIMESTAMPTZ DEFAULT NOW()
      );
    `);
    
    client.release();
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(ctx) {
  await ctx.reply(
    `ü§ñ –≠–°–ö–†–û–£ –ë–û–¢ –ó–ê–ü–£–©–ï–ù!\n\n` +
    `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n` +
    `üõ°Ô∏è –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    Markup.keyboard([
      ['üí∞ –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É'],
      ['üóíÔ∏è –ú–æ–∏ —Å–¥–µ–ª–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]).resize()
  );
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    await pool.query(
      `INSERT INTO users (user_id, username, first_name) 
       VALUES ($1, $2, $3) 
       ON CONFLICT (user_id) DO NOTHING`,
      [ctx.from.id, ctx.from.username, ctx.from.first_name]
    );
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
  }
  
  await showMainMenu(ctx);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
bot.hears('üíº –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É', async (ctx) => {
  const dealId = Math.random().toString(36).substring(2, 8).toUpperCase();
  const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;
  
  try {
    await pool.query(
      `INSERT INTO deals (deal_id, seller_id, deal_type, product_info, currency, amount, deal_link) 
       VALUES ($1, $2, $3, $4, $5, $6, $7)`,
      [dealId, ctx.from.id, 'gifts', '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä', 'RUB', 1000, dealLink]
    );
    
    await ctx.reply(
      `‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n${dealLink}`
    );
  } catch (error) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: ' + error.message);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initDB().then(() => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...');
  bot.launch()
    .then(() => console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!'))
    .catch(err => console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err.message));
});
