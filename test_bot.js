const { Telegraf } = require('telegraf');
const { Pool } = require('pg');

console.log('üîß 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...');

// 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
try {
  const bot = new Telegraf('8242060469:AAHt6_sJt7iFWraOT193hAU4jtXXRPFHgJg');
  console.log('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: –û–ö');
} catch (error) {
  console.log('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞: –û–®–ò–ë–ö–ê', error.message);
  process.exit(1);
}

// 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
console.log('üîß 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');

const pool = new Pool({
  connectionString: 'postgresql://postgres:maksam12345678910777@db.goemwsdzdsenyuhlzdau.supabase.co:5432/postgres',
  ssl: { rejectUnauthorized: false }
});

async function testDatabase() {
  try {
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: –£–°–ü–ï–®–ù–û');
    
    const result = await client.query('SELECT NOW() as time');
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –ë–î: –£–°–ü–ï–®–ù–û', result.rows[0].time);
    
    client.release();
    return true;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ë–î:', error.message);
    console.log('üîç –î–µ—Ç–∞–ª–∏:', {
      code: error.code,
      detail: error.detail
    });
    return false;
  }
}

// 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...');
  
  // –¢–µ—Å—Ç –ë–î
  const dbSuccess = await testDatabase();
  
  if (!dbSuccess) {
    console.log('üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å connection string');
    console.log('2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase –∏–∑ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ firewall –≤ Supabase');
    return;
  }
  
  // –¢–µ—Å—Ç –±–æ—Ç–∞
  try {
    const bot = new Telegraf('8242060469:AAHt6_sJt7iFWraOT193hAU4jtXXRPFHgJg');
    const botInfo = await bot.telegram.getMe();
    console.log('‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', botInfo.username);
    
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
  }
}

runTests();
